
TempSensor_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00003c8a  00003d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800086  00800086  00003d44  2**0
                  ALLOC
  3 .stab         00004020  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c13  00000000  00000000  00007d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a977  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000aad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ac66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ccab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ddac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ed30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_4>
      14:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_5>
      18:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_6>
      1c:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_7>
      20:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_8>
      24:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_9>
      28:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_10>
      2c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <main>
      8a:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Set_CallBack_TIMER_0_OVF_INT+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <Set_CallBack_TIMER_0_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OVF_INT = ptr;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	90 93 87 00 	sts	0x0087, r25
     cbc:	80 93 86 00 	sts	0x0086, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OVF_INT != NULL)
     cf4:	80 91 86 00 	lds	r24, 0x0086
     cf8:	90 91 87 00 	lds	r25, 0x0087
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	29 f0       	breq	.+10     	; 0xd0a <__vector_11+0x40>
	{
		TIMER_ISR.TIMER_0_OVF_INT();
     d00:	e0 91 86 00 	lds	r30, 0x0086
     d04:	f0 91 87 00 	lds	r31, 0x0087
     d08:	09 95       	icall
	}
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <Set_CallBack_TIMER_0_OC_INT+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	31 f0       	breq	.+12     	; 0xd52 <Set_CallBack_TIMER_0_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OC_INT = ptr;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	90 93 89 00 	sts	0x0089, r25
     d4e:	80 93 88 00 	sts	0x0088, r24
	}
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OC_INT != NULL)
     d86:	80 91 88 00 	lds	r24, 0x0088
     d8a:	90 91 89 00 	lds	r25, 0x0089
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	29 f0       	breq	.+10     	; 0xd9c <__vector_10+0x40>
	{
		TIMER_ISR.TIMER_0_OC_INT();
     d92:	e0 91 88 00 	lds	r30, 0x0088
     d96:	f0 91 89 00 	lds	r31, 0x0089
     d9a:	09 95       	icall
	}
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <Set_CallBack_TIMER_1_OVF_INT+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	31 f0       	breq	.+12     	; 0xde4 <Set_CallBack_TIMER_1_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OVF_INT = ptr;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	90 93 8b 00 	sts	0x008B, r25
     de0:	80 93 8a 00 	sts	0x008A, r24
	}
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OVF_INT != NULL)
     e18:	80 91 8a 00 	lds	r24, 0x008A
     e1c:	90 91 8b 00 	lds	r25, 0x008B
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	29 f0       	breq	.+10     	; 0xe2e <__vector_9+0x40>
	{
		TIMER_ISR.TIMER_1_OVF_INT();
     e24:	e0 91 8a 00 	lds	r30, 0x008A
     e28:	f0 91 8b 00 	lds	r31, 0x008B
     e2c:	09 95       	icall
	}
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <Set_CallBack_TIMER_1_OCA_INT+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	31 f0       	breq	.+12     	; 0xe76 <Set_CallBack_TIMER_1_OCA_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCA_INT = ptr;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	90 93 8d 00 	sts	0x008D, r25
     e72:	80 93 8c 00 	sts	0x008C, r24
	}
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCA_INT != NULL)
     eaa:	80 91 8c 00 	lds	r24, 0x008C
     eae:	90 91 8d 00 	lds	r25, 0x008D
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	29 f0       	breq	.+10     	; 0xec0 <__vector_7+0x40>
	{
		TIMER_ISR.TIMER_1_OCA_INT();
     eb6:	e0 91 8c 00 	lds	r30, 0x008C
     eba:	f0 91 8d 00 	lds	r31, 0x008D
     ebe:	09 95       	icall
	}
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <Set_CallBack_TIMER_1_OCB_INT+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	31 f0       	breq	.+12     	; 0xf08 <Set_CallBack_TIMER_1_OCB_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCB_INT = ptr;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	90 93 8f 00 	sts	0x008F, r25
     f04:	80 93 8e 00 	sts	0x008E, r24
	}
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCB_INT != NULL)
     f3c:	80 91 8e 00 	lds	r24, 0x008E
     f40:	90 91 8f 00 	lds	r25, 0x008F
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	29 f0       	breq	.+10     	; 0xf52 <__vector_8+0x40>
	{
		TIMER_ISR.TIMER_1_OCB_INT();
     f48:	e0 91 8e 00 	lds	r30, 0x008E
     f4c:	f0 91 8f 00 	lds	r31, 0x008F
     f50:	09 95       	icall
	}
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <Set_CallBack_TIMER_1_CAPT_INT+0x6>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	31 f0       	breq	.+12     	; 0xf9a <Set_CallBack_TIMER_1_CAPT_INT+0x22>
	{
		TIMER_ISR.TIMER_1_CAPT_INT = ptr;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	90 93 91 00 	sts	0x0091, r25
     f96:	80 93 90 00 	sts	0x0090, r24
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_CAPT_INT != NULL)
     fce:	80 91 90 00 	lds	r24, 0x0090
     fd2:	90 91 91 00 	lds	r25, 0x0091
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <__vector_6+0x40>
	{
		TIMER_ISR.TIMER_1_CAPT_INT();
     fda:	e0 91 90 00 	lds	r30, 0x0090
     fde:	f0 91 91 00 	lds	r31, 0x0091
     fe2:	09 95       	icall
	}
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <Set_CallBack_TIMER_2_OVF_INT+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	31 f0       	breq	.+12     	; 0x102c <Set_CallBack_TIMER_2_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OVF_INT = ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 93 00 	sts	0x0093, r25
    1028:	80 93 92 00 	sts	0x0092, r24
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OVF_INT != NULL)
    1060:	80 91 92 00 	lds	r24, 0x0092
    1064:	90 91 93 00 	lds	r25, 0x0093
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	29 f0       	breq	.+10     	; 0x1076 <__vector_5+0x40>
	{
		TIMER_ISR.TIMER_2_OVF_INT();
    106c:	e0 91 92 00 	lds	r30, 0x0092
    1070:	f0 91 93 00 	lds	r31, 0x0093
    1074:	09 95       	icall
	}
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <Set_CallBack_TIMER_2_OC_INT+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	31 f0       	breq	.+12     	; 0x10be <Set_CallBack_TIMER_2_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OC_INT = ptr;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	90 93 95 00 	sts	0x0095, r25
    10ba:	80 93 94 00 	sts	0x0094, r24
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OC_INT != NULL)
    10f2:	80 91 94 00 	lds	r24, 0x0094
    10f6:	90 91 95 00 	lds	r25, 0x0095
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__vector_4+0x40>
	{
		TIMER_ISR.TIMER_2_OC_INT();
    10fe:	e0 91 94 00 	lds	r30, 0x0094
    1102:	f0 91 95 00 	lds	r31, 0x0095
    1106:	09 95       	icall
	}
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <Timer_init+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <Timer_init+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
    113e:	e9 81       	ldd	r30, Y+1	; 0x01
    1140:	fa 81       	ldd	r31, Y+2	; 0x02
    1142:	81 85       	ldd	r24, Z+9	; 0x09
    1144:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
	switch(timer_config_ptr->timer)
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 85       	ldd	r24, Z+9	; 0x09
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3c 83       	std	Y+4, r19	; 0x04
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <Timer_init+0x34>
    1160:	4e c0       	rjmp	.+156    	; 0x11fe <Timer_init+0xd0>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <Timer_init+0x40>
    116c:	b1 c0       	rjmp	.+354    	; 0x12d0 <Timer_init+0x1a2>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	09 f0       	breq	.+2      	; 0x1178 <Timer_init+0x4a>
    1176:	ee c0       	rjmp	.+476    	; 0x1354 <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
    1178:	a2 e5       	ldi	r26, 0x52	; 82
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	84 81       	ldd	r24, Z+4	; 0x04
    1182:	95 81       	ldd	r25, Z+5	; 0x05
    1184:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
    1186:	a3 e5       	ldi	r26, 0x53	; 83
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e3 e5       	ldi	r30, 0x53	; 83
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	80 85       	ldd	r24, Z+8	; 0x08
    119a:	88 23       	and	r24, r24
    119c:	41 f4       	brne	.+16     	; 0x11ae <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
    119e:	a9 e5       	ldi	r26, 0x59	; 89
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e9 e5       	ldi	r30, 0x59	; 89
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	8c 93       	st	X, r24
    11ac:	1a c0       	rjmp	.+52     	; 0x11e2 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	80 85       	ldd	r24, Z+8	; 0x08
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a9 f4       	brne	.+42     	; 0x11e2 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    11b8:	ac e5       	ldi	r26, 0x5C	; 92
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 60       	ori	r24, 0x08	; 8
    11d2:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
    11d4:	a9 e5       	ldi	r26, 0x59	; 89
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e9 e5       	ldi	r30, 0x59	; 89
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
    11e2:	a3 e5       	ldi	r26, 0x53	; 83
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e5       	ldi	r30, 0x53	; 83
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	98 2f       	mov	r25, r24
    11ee:	98 7f       	andi	r25, 0xF8	; 248
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	86 81       	ldd	r24, Z+6	; 0x06
    11f6:	87 70       	andi	r24, 0x07	; 7
    11f8:	89 2b       	or	r24, r25
    11fa:	8c 93       	st	X, r24
    11fc:	ab c0       	rjmp	.+342    	; 0x1354 <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
    11fe:	ac e4       	ldi	r26, 0x4C	; 76
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	95 81       	ldd	r25, Z+5	; 0x05
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	80 85       	ldd	r24, Z+8	; 0x08
    1224:	88 23       	and	r24, r24
    1226:	41 f4       	brne	.+16     	; 0x1238 <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
    1228:	a9 e5       	ldi	r26, 0x59	; 89
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 e5       	ldi	r30, 0x59	; 89
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	84 60       	ori	r24, 0x04	; 4
    1234:	8c 93       	st	X, r24
    1236:	3e c0       	rjmp	.+124    	; 0x12b4 <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1238:	e9 81       	ldd	r30, Y+1	; 0x01
    123a:	fa 81       	ldd	r31, Y+2	; 0x02
    123c:	80 85       	ldd	r24, Z+8	; 0x08
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	c9 f5       	brne	.+114    	; 0x12b4 <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	82 85       	ldd	r24, Z+10	; 0x0a
    1248:	88 23       	and	r24, r24
    124a:	c1 f4       	brne	.+48     	; 0x127c <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
    124c:	aa e4       	ldi	r26, 0x4A	; 74
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 60       	ori	r24, 0x08	; 8
    126a:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
    126c:	a9 e5       	ldi	r26, 0x59	; 89
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e9 e5       	ldi	r30, 0x59	; 89
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	8c 93       	st	X, r24
    127a:	1c c0       	rjmp	.+56     	; 0x12b4 <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	82 85       	ldd	r24, Z+10	; 0x0a
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	b9 f4       	brne	.+46     	; 0x12b4 <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
    1286:	af e4       	ldi	r26, 0x4F	; 79
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ef e4       	ldi	r30, 0x4F	; 79
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
    1294:	a8 e4       	ldi	r26, 0x48	; 72
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	9c 93       	st	X, r25
    12a4:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
    12a6:	a9 e5       	ldi	r26, 0x59	; 89
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 60       	ori	r24, 0x08	; 8
    12b2:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	98 2f       	mov	r25, r24
    12c0:	98 7f       	andi	r25, 0xF8	; 248
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	86 81       	ldd	r24, Z+6	; 0x06
    12c8:	87 70       	andi	r24, 0x07	; 7
    12ca:	89 2b       	or	r24, r25
    12cc:	8c 93       	st	X, r24
    12ce:	42 c0       	rjmp	.+132    	; 0x1354 <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
    12d0:	a4 e4       	ldi	r26, 0x44	; 68
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	84 81       	ldd	r24, Z+4	; 0x04
    12da:	95 81       	ldd	r25, Z+5	; 0x05
    12dc:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
    12de:	a5 e4       	ldi	r26, 0x45	; 69
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e4       	ldi	r30, 0x45	; 69
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	80 85       	ldd	r24, Z+8	; 0x08
    12f2:	88 23       	and	r24, r24
    12f4:	41 f4       	brne	.+16     	; 0x1306 <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8c 93       	st	X, r24
    1304:	1a c0       	rjmp	.+52     	; 0x133a <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	80 85       	ldd	r24, Z+8	; 0x08
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a9 f4       	brne	.+42     	; 0x133a <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    1310:	a3 e4       	ldi	r26, 0x43	; 67
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 81       	ldd	r30, Y+1	; 0x01
    1316:	fa 81       	ldd	r31, Y+2	; 0x02
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
    131e:	a5 e4       	ldi	r26, 0x45	; 69
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e4       	ldi	r30, 0x45	; 69
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 60       	ori	r24, 0x08	; 8
    132a:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 68       	ori	r24, 0x80	; 128
    1338:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
    133a:	a5 e4       	ldi	r26, 0x45	; 69
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e4       	ldi	r30, 0x45	; 69
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	98 2f       	mov	r25, r24
    1346:	98 7f       	andi	r25, 0xF8	; 248
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	87 81       	ldd	r24, Z+7	; 0x07
    134e:	87 70       	andi	r24, 0x07	; 7
    1350:	89 2b       	or	r24, r25
    1352:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <change_compared_and_duty_value+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <change_compared_and_duty_value+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	81 85       	ldd	r24, Z+9	; 0x09
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	89 f0       	breq	.+34     	; 0x13ac <change_compared_and_duty_value+0x4a>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	29 f1       	breq	.+74     	; 0x13de <change_compared_and_duty_value+0x7c>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	41 f5       	brne	.+80     	; 0x13ec <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    139c:	ac e5       	ldi	r26, 0x5C	; 92
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	8c 93       	st	X, r24
    13aa:	20 c0       	rjmp	.+64     	; 0x13ec <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
    13ac:	aa e4       	ldi	r26, 0x4A	; 74
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 81       	ldd	r30, Y+1	; 0x01
    13b2:	fa 81       	ldd	r31, Y+2	; 0x02
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	82 85       	ldd	r24, Z+10	; 0x0a
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 f4       	brne	.+36     	; 0x13ec <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
    13c8:	e8 e4       	ldi	r30, 0x48	; 72
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	a9 81       	ldd	r26, Y+1	; 0x01
    13ce:	ba 81       	ldd	r27, Y+2	; 0x02
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	13 97       	sbiw	r26, 0x03	; 3
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    13de:	a3 e4       	ldi	r26, 0x43	; 67
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	8c 93       	st	X, r24
		break ;
	}
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <Timer_DeInit+0x6>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3b 83       	std	Y+3, r19	; 0x03
    1410:	2a 83       	std	Y+2, r18	; 0x02
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	19 f1       	breq	.+70     	; 0x1462 <Timer_DeInit+0x68>
    141c:	2a 81       	ldd	r18, Y+2	; 0x02
    141e:	3b 81       	ldd	r19, Y+3	; 0x03
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <Timer_DeInit+0x36>
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <Timer_DeInit+0x4c>
    142e:	56 c0       	rjmp	.+172    	; 0x14dc <Timer_DeInit+0xe2>
    1430:	2a 81       	ldd	r18, Y+2	; 0x02
    1432:	3b 81       	ldd	r19, Y+3	; 0x03
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	31 f1       	breq	.+76     	; 0x1486 <Timer_DeInit+0x8c>
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	79 f1       	breq	.+94     	; 0x14a2 <Timer_DeInit+0xa8>
    1444:	4b c0       	rjmp	.+150    	; 0x14dc <Timer_DeInit+0xe2>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
    1446:	e3 e5       	ldi	r30, 0x53	; 83
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
    144c:	e2 e5       	ldi	r30, 0x52	; 82
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
    1452:	a9 e5       	ldi	r26, 0x59	; 89
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 e5       	ldi	r30, 0x59	; 89
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8c 7f       	andi	r24, 0xFC	; 252
    145e:	8c 93       	st	X, r24
    1460:	3d c0       	rjmp	.+122    	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
    1462:	ef e4       	ldi	r30, 0x4F	; 79
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
    146e:	ec e4       	ldi	r30, 0x4C	; 76
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	11 82       	std	Z+1, r1	; 0x01
    1474:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
    1476:	a9 e5       	ldi	r26, 0x59	; 89
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e9 e5       	ldi	r30, 0x59	; 89
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	83 7e       	andi	r24, 0xE3	; 227
    1482:	8c 93       	st	X, r24
    1484:	2b c0       	rjmp	.+86     	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
    1486:	e5 e4       	ldi	r30, 0x45	; 69
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
    148c:	e4 e4       	ldi	r30, 0x44	; 68
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
    1492:	a9 e5       	ldi	r26, 0x59	; 89
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e9 e5       	ldi	r30, 0x59	; 89
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 73       	andi	r24, 0x3F	; 63
    149e:	8c 93       	st	X, r24
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
    14a2:	a9 e5       	ldi	r26, 0x59	; 89
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e9 e5       	ldi	r30, 0x59	; 89
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 72       	andi	r24, 0x20	; 32
    14ae:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
    14b0:	e3 e5       	ldi	r30, 0x53	; 83
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
    14b6:	e2 e5       	ldi	r30, 0x52	; 82
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
    14bc:	ef e4       	ldi	r30, 0x4F	; 79
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
    14c2:	ee e4       	ldi	r30, 0x4E	; 78
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
    14c8:	ec e4       	ldi	r30, 0x4C	; 76
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
    14d0:	e5 e4       	ldi	r30, 0x45	; 69
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
    14d6:	e4 e4       	ldi	r30, 0x44	; 68
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
		break;
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <clear_timer+0x6>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3b 83       	std	Y+3, r19	; 0x03
    14fe:	2a 83       	std	Y+2, r18	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	c9 f0       	breq	.+50     	; 0x153c <clear_timer+0x54>
    150a:	2a 81       	ldd	r18, Y+2	; 0x02
    150c:	3b 81       	ldd	r19, Y+3	; 0x03
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <clear_timer+0x36>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <clear_timer+0x4c>
    151c:	22 c0       	rjmp	.+68     	; 0x1562 <clear_timer+0x7a>
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	3b 81       	ldd	r19, Y+3	; 0x03
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	79 f0       	breq	.+30     	; 0x1546 <clear_timer+0x5e>
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	71 f0       	breq	.+28     	; 0x154e <clear_timer+0x66>
    1532:	17 c0       	rjmp	.+46     	; 0x1562 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
    1534:	e2 e5       	ldi	r30, 0x52	; 82
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
    153c:	ec e4       	ldi	r30, 0x4C	; 76
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	11 82       	std	Z+1, r1	; 0x01
    1542:	10 82       	st	Z, r1
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
    1546:	e4 e4       	ldi	r30, 0x44	; 68
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	10 82       	st	Z, r1
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
    154e:	e2 e5       	ldi	r30, 0x52	; 82
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
    1554:	ec e4       	ldi	r30, 0x4C	; 76
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
    155c:	e4 e4       	ldi	r30, 0x44	; 68
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <PWM_timers_init+0xa>
    1578:	00 d0       	rcall	.+0      	; 0x157a <PWM_timers_init+0xc>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	81 85       	ldd	r24, Z+9	; 0x09
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <PWM_timers_init+0x2e>
    159a:	3e c0       	rjmp	.+124    	; 0x1618 <PWM_timers_init+0xaa>
    159c:	eb 81       	ldd	r30, Y+3	; 0x03
    159e:	fc 81       	ldd	r31, Y+4	; 0x04
    15a0:	e2 30       	cpi	r30, 0x02	; 2
    15a2:	f1 05       	cpc	r31, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <PWM_timers_init+0x3a>
    15a6:	00 c1       	rjmp	.+512    	; 0x17a8 <PWM_timers_init+0x23a>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <PWM_timers_init+0x46>
    15b2:	32 c1       	rjmp	.+612    	; 0x1818 <PWM_timers_init+0x2aa>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
    15ba:	ac e5       	ldi	r26, 0x5C	; 92
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	8c 93       	st	X, r24
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 77       	andi	r24, 0x7F	; 127
    15d4:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    15d6:	e9 81       	ldd	r30, Y+1	; 0x01
    15d8:	fa 81       	ldd	r31, Y+2	; 0x02
    15da:	80 85       	ldd	r24, Z+8	; 0x08
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	29 f4       	brne	.+10     	; 0x15ea <PWM_timers_init+0x7c>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
    15e0:	e3 e5       	ldi	r30, 0x53	; 83
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	88 e6       	ldi	r24, 0x68	; 104
    15e6:	80 83       	st	Z, r24
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <PWM_timers_init+0x8e>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	80 85       	ldd	r24, Z+8	; 0x08
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	21 f4       	brne	.+8      	; 0x15fc <PWM_timers_init+0x8e>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
    15f4:	e3 e5       	ldi	r30, 0x53	; 83
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 e6       	ldi	r24, 0x60	; 96
    15fa:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
    15fc:	a3 e5       	ldi	r26, 0x53	; 83
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e3 e5       	ldi	r30, 0x53	; 83
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	98 2f       	mov	r25, r24
    1608:	98 7f       	andi	r25, 0xF8	; 248
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	86 81       	ldd	r24, Z+6	; 0x06
    1610:	87 70       	andi	r24, 0x07	; 7
    1612:	89 2b       	or	r24, r25
    1614:	8c 93       	st	X, r24
    1616:	00 c1       	rjmp	.+512    	; 0x1818 <PWM_timers_init+0x2aa>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
    161e:	a6 e4       	ldi	r26, 0x46	; 70
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e9 81       	ldd	r30, Y+1	; 0x01
    1624:	fa 81       	ldd	r31, Y+2	; 0x02
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	9c 93       	st	X, r25
    162e:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
    1630:	aa e4       	ldi	r26, 0x4A	; 74
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e9 81       	ldd	r30, Y+1	; 0x01
    1636:	fa 81       	ldd	r31, Y+2	; 0x02
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	11 96       	adiw	r26, 0x01	; 1
    163e:	9c 93       	st	X, r25
    1640:	8e 93       	st	-X, r24
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
    1642:	af e4       	ldi	r26, 0x4F	; 79
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ef e4       	ldi	r30, 0x4F	; 79
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	87 7f       	andi	r24, 0xF7	; 247
    164e:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1650:	e9 81       	ldd	r30, Y+1	; 0x01
    1652:	fa 81       	ldd	r31, Y+2	; 0x02
    1654:	80 85       	ldd	r24, Z+8	; 0x08
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	09 f0       	breq	.+2      	; 0x165c <PWM_timers_init+0xee>
    165a:	56 c0       	rjmp	.+172    	; 0x1708 <PWM_timers_init+0x19a>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    165c:	ae e4       	ldi	r26, 0x4E	; 78
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ee e4       	ldi	r30, 0x4E	; 78
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 61       	ori	r24, 0x10	; 16
    1668:	8c 93       	st	X, r24
    166a:	ae e4       	ldi	r26, 0x4E	; 78
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ee e4       	ldi	r30, 0x4E	; 78
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	8c 93       	st	X, r24
    1678:	af e4       	ldi	r26, 0x4F	; 79
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ef e4       	ldi	r30, 0x4F	; 79
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	8c 93       	st	X, r24
    1686:	af e4       	ldi	r26, 0x4F	; 79
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ef e4       	ldi	r30, 0x4F	; 79
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8e 7f       	andi	r24, 0xFE	; 254
    1692:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
    1694:	af e4       	ldi	r26, 0x4F	; 79
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ef e4       	ldi	r30, 0x4F	; 79
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 68       	ori	r24, 0x80	; 128
    16a0:	8c 93       	st	X, r24
    16a2:	af e4       	ldi	r26, 0x4F	; 79
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ef e4       	ldi	r30, 0x4F	; 79
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	8c 93       	st	X, r24
    16b0:	af e4       	ldi	r26, 0x4F	; 79
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ef e4       	ldi	r30, 0x4F	; 79
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 7b       	andi	r24, 0xBF	; 191
    16bc:	8c 93       	st	X, r24
    16be:	af e4       	ldi	r26, 0x4F	; 79
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ef e4       	ldi	r30, 0x4F	; 79
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 7e       	andi	r24, 0xEF	; 239
    16ca:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	83 85       	ldd	r24, Z+11	; 0x0b
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <PWM_timers_init+0x16a>
    16d6:	5a c0       	rjmp	.+180    	; 0x178c <PWM_timers_init+0x21e>
			{
				CLR_BIT(TCC1A_REG,2);
    16d8:	af e4       	ldi	r26, 0x4F	; 79
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ef e4       	ldi	r30, 0x4F	; 79
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8b 7f       	andi	r24, 0xFB	; 251
    16e4:	8c 93       	st	X, r24
				//DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    16e6:	af e4       	ldi	r26, 0x4F	; 79
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ef e4       	ldi	r30, 0x4F	; 79
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 62       	ori	r24, 0x20	; 32
    16f2:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    16f4:	a8 e4       	ldi	r26, 0x48	; 72
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e9 81       	ldd	r30, Y+1	; 0x01
    16fa:	fa 81       	ldd	r31, Y+2	; 0x02
    16fc:	84 81       	ldd	r24, Z+4	; 0x04
    16fe:	95 81       	ldd	r25, Z+5	; 0x05
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	9c 93       	st	X, r25
    1704:	8e 93       	st	-X, r24
    1706:	42 c0       	rjmp	.+132    	; 0x178c <PWM_timers_init+0x21e>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	80 85       	ldd	r24, Z+8	; 0x08
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	e9 f5       	brne	.+122    	; 0x178c <PWM_timers_init+0x21e>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1712:	ae e4       	ldi	r26, 0x4E	; 78
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ee e4       	ldi	r30, 0x4E	; 78
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 61       	ori	r24, 0x10	; 16
    171e:	8c 93       	st	X, r24
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	87 7f       	andi	r24, 0xF7	; 247
    172c:	8c 93       	st	X, r24
    172e:	af e4       	ldi	r26, 0x4F	; 79
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e4       	ldi	r30, 0x4F	; 79
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	8c 93       	st	X, r24
    173c:	af e4       	ldi	r26, 0x4F	; 79
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ef e4       	ldi	r30, 0x4F	; 79
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8e 7f       	andi	r24, 0xFE	; 254
    1748:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	83 85       	ldd	r24, Z+11	; 0x0b
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	e1 f4       	brne	.+56     	; 0x178c <PWM_timers_init+0x21e>
			{
				CLR_BIT(TCC1A_REG,2);
    1754:	af e4       	ldi	r26, 0x4F	; 79
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ef e4       	ldi	r30, 0x4F	; 79
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8b 7f       	andi	r24, 0xFB	; 251
    1760:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	64 e0       	ldi	r22, 0x04	; 4
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    176c:	af e4       	ldi	r26, 0x4F	; 79
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ef e4       	ldi	r30, 0x4F	; 79
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 62       	ori	r24, 0x20	; 32
    1778:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    177a:	a8 e4       	ldi	r26, 0x48	; 72
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	84 81       	ldd	r24, Z+4	; 0x04
    1784:	95 81       	ldd	r25, Z+5	; 0x05
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	9c 93       	st	X, r25
    178a:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
    178c:	ae e4       	ldi	r26, 0x4E	; 78
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ee e4       	ldi	r30, 0x4E	; 78
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	98 2f       	mov	r25, r24
    1798:	98 7f       	andi	r25, 0xF8	; 248
    179a:	e9 81       	ldd	r30, Y+1	; 0x01
    179c:	fa 81       	ldd	r31, Y+2	; 0x02
    179e:	86 81       	ldd	r24, Z+6	; 0x06
    17a0:	87 70       	andi	r24, 0x07	; 7
    17a2:	89 2b       	or	r24, r25
    17a4:	8c 93       	st	X, r24
    17a6:	38 c0       	rjmp	.+112    	; 0x1818 <PWM_timers_init+0x2aa>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
    17ae:	03 e4       	ldi	r16, 0x43	; 67
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	fa 81       	ldd	r31, Y+2	; 0x02
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	24 e6       	ldi	r18, 0x64	; 100
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	b9 01       	movw	r22, r18
    17c0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__udivmodhi4>
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 83       	st	Z, r24
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
    17ca:	a5 e4       	ldi	r26, 0x45	; 69
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e4       	ldi	r30, 0x45	; 69
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 77       	andi	r24, 0x7F	; 127
    17d6:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    17d8:	e9 81       	ldd	r30, Y+1	; 0x01
    17da:	fa 81       	ldd	r31, Y+2	; 0x02
    17dc:	80 85       	ldd	r24, Z+8	; 0x08
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	29 f4       	brne	.+10     	; 0x17ec <PWM_timers_init+0x27e>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
    17e2:	e5 e4       	ldi	r30, 0x45	; 69
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	88 e6       	ldi	r24, 0x68	; 104
    17e8:	80 83       	st	Z, r24
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <PWM_timers_init+0x290>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	80 85       	ldd	r24, Z+8	; 0x08
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	21 f4       	brne	.+8      	; 0x17fe <PWM_timers_init+0x290>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
    17f6:	e5 e4       	ldi	r30, 0x45	; 69
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 e6       	ldi	r24, 0x60	; 96
    17fc:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
    17fe:	a5 e4       	ldi	r26, 0x45	; 69
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e4       	ldi	r30, 0x45	; 69
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	98 2f       	mov	r25, r24
    180a:	98 7f       	andi	r25, 0xF8	; 248
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	87 81       	ldd	r24, Z+7	; 0x07
    1812:	87 70       	andi	r24, 0x07	; 7
    1814:	89 2b       	or	r24, r25
    1816:	8c 93       	st	X, r24
		break;
		}

	}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	08 95       	ret

0000182a <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
    1832:	af e5       	ldi	r26, 0x5F	; 95
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ef e5       	ldi	r30, 0x5F	; 95
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 68       	ori	r24, 0x80	; 128
    183e:	8c 93       	st	X, r24
	}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <Global_VidINTDisable>:

	void Global_VidINTDisable(void)
	{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(S_REG,7);
    184e:	af e5       	ldi	r26, 0x5F	; 95
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ef e5       	ldi	r30, 0x5F	; 95
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 77       	andi	r24, 0x7F	; 127
    185a:	8c 93       	st	X, r24
	}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <DIO_u8setPortDirection>:
#define NULL     (void *)0

static PORT_t * DIO[DIO_PERIPHERAL_NUM] = {DIOA, DIOB, DIOC, DIOD};

u8 DIO_u8setPortDirection(PORT_e Copy_PORT_ePort, DIRECTION_e Copy_DIRECTION_eDirection)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_u8setPortDirection+0x6>
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	8a 83       	std	Y+2, r24	; 0x02
    1870:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1872:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PORT_ePort <= PORT_D)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	70 f4       	brcc	.+28     	; 0x1896 <DIO_u8setPortDirection+0x34>
	{
		DIO[Copy_PORT_ePort]->DDR = Copy_DIRECTION_eDirection;
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	fc 01       	movw	r30, r24
    1886:	e3 58       	subi	r30, 0x83	; 131
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	01 90       	ld	r0, Z+
    188c:	f0 81       	ld	r31, Z
    188e:	e0 2d       	mov	r30, r0
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	81 83       	std	Z+1, r24	; 0x01
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_u8setPortDirection+0x38>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <DIO_u8setPortValue>:

u8 DIO_u8setPortValue(PORT_e Copy_PORT_ePort, STATE_e Copy_STATE_eValue)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <DIO_u8setPortValue+0x6>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    18b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PORT_ePort <= PORT_D)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	70 f4       	brcc	.+28     	; 0x18dc <DIO_u8setPortValue+0x34>
	{
		DIO[Copy_PORT_ePort]->PORT = Copy_STATE_eValue;
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	fc 01       	movw	r30, r24
    18cc:	e3 58       	subi	r30, 0x83	; 131
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	01 90       	ld	r0, Z+
    18d2:	f0 81       	ld	r31, Z
    18d4:	e0 2d       	mov	r30, r0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	82 83       	std	Z+2, r24	; 0x02
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_u8setPortValue+0x38>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <DIO_u8getPortValue>:


u8 DIO_u8getPortValue(PORT_e Copy_PORT_ePort, u8 * Copy_pu8Value)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <DIO_u8getPortValue+0x6>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <DIO_u8getPortValue+0x8>
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	7c 83       	std	Y+4, r23	; 0x04
    18fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1900:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL && Copy_PORT_ePort <= PORT_D)
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	99 f0       	breq	.+38     	; 0x1930 <DIO_u8getPortValue+0x42>
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	80 f4       	brcc	.+32     	; 0x1930 <DIO_u8getPortValue+0x42>
	{
		*Copy_pu8Value = DIO[Copy_PORT_ePort]->PIN;
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	fc 01       	movw	r30, r24
    191c:	e3 58       	subi	r30, 0x83	; 131
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	01 90       	ld	r0, Z+
    1922:	f0 81       	ld	r31, Z
    1924:	e0 2d       	mov	r30, r0
    1926:	80 81       	ld	r24, Z
    1928:	eb 81       	ldd	r30, Y+3	; 0x03
    192a:	fc 81       	ldd	r31, Y+4	; 0x04
    192c:	80 83       	st	Z, r24
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_u8getPortValue+0x46>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,DIRECTION_e Copy_DIRECTION_eDirection)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <DIO_u8setPinDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_u8setPinDirection+0x8>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_u8setPinDirection+0xa>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
    1956:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1958:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 30       	cpi	r24, 0x08	; 8
    195e:	08 f0       	brcs	.+2      	; 0x1962 <DIO_u8setPinDirection+0x1e>
    1960:	65 c0       	rjmp	.+202    	; 0x1a2c <DIO_u8setPinDirection+0xe8>
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	84 30       	cpi	r24, 0x04	; 4
    1966:	08 f0       	brcs	.+2      	; 0x196a <DIO_u8setPinDirection+0x26>
    1968:	61 c0       	rjmp	.+194    	; 0x1a2c <DIO_u8setPinDirection+0xe8>
	{
		switch(Copy_DIRECTION_eDirection)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3e 83       	std	Y+6, r19	; 0x06
    1972:	2d 83       	std	Y+5, r18	; 0x05
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	31 f0       	breq	.+12     	; 0x1988 <DIO_u8setPinDirection+0x44>
    197c:	2d 81       	ldd	r18, Y+5	; 0x05
    197e:	3e 81       	ldd	r19, Y+6	; 0x06
    1980:	21 30       	cpi	r18, 0x01	; 1
    1982:	31 05       	cpc	r19, r1
    1984:	49 f1       	breq	.+82     	; 0x19d8 <DIO_u8setPinDirection+0x94>
    1986:	4f c0       	rjmp	.+158    	; 0x1a26 <DIO_u8setPinDirection+0xe2>
		{
		case INPUT : CLR_BIT(DIO[Copy_PORT_ePort]->DDR , Copy_PIN_ePin); break;
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	fc 01       	movw	r30, r24
    1994:	e3 58       	subi	r30, 0x83	; 131
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	a0 81       	ld	r26, Z
    199a:	b1 81       	ldd	r27, Z+1	; 0x01
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	fc 01       	movw	r30, r24
    19a8:	e3 58       	subi	r30, 0x83	; 131
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	01 90       	ld	r0, Z+
    19ae:	f0 81       	ld	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	81 81       	ldd	r24, Z+1	; 0x01
    19b4:	48 2f       	mov	r20, r24
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_u8setPinDirection+0x84>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <DIO_u8setPinDirection+0x80>
    19cc:	80 95       	com	r24
    19ce:	84 23       	and	r24, r20
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	8c 93       	st	X, r24
    19d4:	11 97       	sbiw	r26, 0x01	; 1
    19d6:	2c c0       	rjmp	.+88     	; 0x1a30 <DIO_u8setPinDirection+0xec>
		case OUTPUT : SET_BIT(DIO[Copy_PORT_ePort]->DDR , Copy_PIN_ePin); break;
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	fc 01       	movw	r30, r24
    19e4:	e3 58       	subi	r30, 0x83	; 131
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	a0 81       	ld	r26, Z
    19ea:	b1 81       	ldd	r27, Z+1	; 0x01
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	fc 01       	movw	r30, r24
    19f8:	e3 58       	subi	r30, 0x83	; 131
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	01 90       	ld	r0, Z+
    19fe:	f0 81       	ld	r31, Z
    1a00:	e0 2d       	mov	r30, r0
    1a02:	81 81       	ldd	r24, Z+1	; 0x01
    1a04:	48 2f       	mov	r20, r24
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_u8setPinDirection+0xd4>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_u8setPinDirection+0xd0>
    1a1c:	84 2b       	or	r24, r20
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	8c 93       	st	X, r24
    1a22:	11 97       	sbiw	r26, 0x01	; 1
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <DIO_u8setPinDirection+0xec>
		default : Local_u8errStatus = RT_NOK; break;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_u8setPinDirection+0xec>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a32:	26 96       	adiw	r28, 0x06	; 6
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,STATE_e Copy_STATE_eValue)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <DIO_u8setPinValue+0x6>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <DIO_u8setPinValue+0x8>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <DIO_u8setPinValue+0xa>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	6b 83       	std	Y+3, r22	; 0x03
    1a56:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1a58:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 30       	cpi	r24, 0x08	; 8
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <DIO_u8setPinValue+0x1e>
    1a60:	65 c0       	rjmp	.+202    	; 0x1b2c <DIO_u8setPinValue+0xe8>
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <DIO_u8setPinValue+0x26>
    1a68:	61 c0       	rjmp	.+194    	; 0x1b2c <DIO_u8setPinValue+0xe8>
	{
		switch(Copy_STATE_eValue)
    1a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3e 83       	std	Y+6, r19	; 0x06
    1a72:	2d 83       	std	Y+5, r18	; 0x05
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <DIO_u8setPinValue+0x44>
    1a7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a80:	21 30       	cpi	r18, 0x01	; 1
    1a82:	31 05       	cpc	r19, r1
    1a84:	49 f1       	breq	.+82     	; 0x1ad8 <DIO_u8setPinValue+0x94>
    1a86:	4f c0       	rjmp	.+158    	; 0x1b26 <DIO_u8setPinValue+0xe2>
		{
		case LOW : CLR_BIT(DIO[Copy_PORT_ePort]->PORT , Copy_PIN_ePin); break;
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	fc 01       	movw	r30, r24
    1a94:	e3 58       	subi	r30, 0x83	; 131
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	a0 81       	ld	r26, Z
    1a9a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e3 58       	subi	r30, 0x83	; 131
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	01 90       	ld	r0, Z+
    1aae:	f0 81       	ld	r31, Z
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_u8setPinValue+0x84>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <DIO_u8setPinValue+0x80>
    1acc:	80 95       	com	r24
    1ace:	84 23       	and	r24, r20
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	8c 93       	st	X, r24
    1ad4:	12 97       	sbiw	r26, 0x02	; 2
    1ad6:	2c c0       	rjmp	.+88     	; 0x1b30 <DIO_u8setPinValue+0xec>
		case HIGH : SET_BIT(DIO[Copy_PORT_ePort]->PORT , Copy_PIN_ePin); break;
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e3 58       	subi	r30, 0x83	; 131
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	a0 81       	ld	r26, Z
    1aea:	b1 81       	ldd	r27, Z+1	; 0x01
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	fc 01       	movw	r30, r24
    1af8:	e3 58       	subi	r30, 0x83	; 131
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	01 90       	ld	r0, Z+
    1afe:	f0 81       	ld	r31, Z
    1b00:	e0 2d       	mov	r30, r0
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	48 2f       	mov	r20, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_u8setPinValue+0xd4>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_u8setPinValue+0xd0>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	8c 93       	st	X, r24
    1b22:	12 97       	sbiw	r26, 0x02	; 2
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <DIO_u8setPinValue+0xec>
		default : Local_u8errStatus = RT_NOK; break;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_u8setPinValue+0xec>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	26 96       	adiw	r28, 0x06	; 6
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DIO_u8getPinValue>:


u8 DIO_u8getPinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,u8 * Copy_pu8Value)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <DIO_u8getPinValue+0x6>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <DIO_u8getPinValue+0x8>
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	8a 83       	std	Y+2, r24	; 0x02
    1b54:	6b 83       	std	Y+3, r22	; 0x03
    1b56:	5d 83       	std	Y+5, r21	; 0x05
    1b58:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	31 f1       	breq	.+76     	; 0x1bb0 <DIO_u8getPinValue+0x6c>
	{
		if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	88 30       	cpi	r24, 0x08	; 8
    1b68:	00 f5       	brcc	.+64     	; 0x1baa <DIO_u8getPinValue+0x66>
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	e8 f4       	brcc	.+58     	; 0x1baa <DIO_u8getPinValue+0x66>
		{
		*Copy_pu8Value=GET_BIT(DIO[Copy_PORT_ePort]->PIN,Copy_PIN_ePin);
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	88 2f       	mov	r24, r24
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e3 58       	subi	r30, 0x83	; 131
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	01 90       	ld	r0, Z+
    1b82:	f0 81       	ld	r31, Z
    1b84:	e0 2d       	mov	r30, r0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_u8getPinValue+0x56>
    1b96:	55 95       	asr	r21
    1b98:	47 95       	ror	r20
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_u8getPinValue+0x52>
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ba4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ba6:	80 83       	st	Z, r24
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <DIO_u8getPinValue+0x70>
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_u8getPinValue+0x70>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <DIO_u8togglePinValue>:

u8 DIO_u8togglePinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <DIO_u8togglePinValue+0x6>
    1bcc:	0f 92       	push	r0
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	8a 83       	std	Y+2, r24	; 0x02
    1bd4:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	88 30       	cpi	r24, 0x08	; 8
    1bdc:	50 f5       	brcc	.+84     	; 0x1c32 <DIO_u8togglePinValue+0x6c>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	38 f5       	brcc	.+78     	; 0x1c32 <DIO_u8togglePinValue+0x6c>
	{
		TOG_BIT(DIO[Copy_PORT_ePort]->PORT,Copy_PIN_ePin);
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	88 2f       	mov	r24, r24
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e3 58       	subi	r30, 0x83	; 131
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	a0 81       	ld	r26, Z
    1bf6:	b1 81       	ldd	r27, Z+1	; 0x01
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	fc 01       	movw	r30, r24
    1c04:	e3 58       	subi	r30, 0x83	; 131
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	01 90       	ld	r0, Z+
    1c0a:	f0 81       	ld	r31, Z
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	48 2f       	mov	r20, r24
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_u8togglePinValue+0x5e>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_u8togglePinValue+0x5a>
    1c28:	84 27       	eor	r24, r20
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	8c 93       	st	X, r24
    1c2e:	12 97       	sbiw	r26, 0x02	; 2
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8togglePinValue+0x70>
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1c36:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <DIO_u8setInputPullUpResistor>:

u8 DIO_u8setInputPullUpResistor(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <DIO_u8setInputPullUpResistor+0x6>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	8a 83       	std	Y+2, r24	; 0x02
    1c52:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1c54:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	50 f5       	brcc	.+84     	; 0x1cb0 <DIO_u8setInputPullUpResistor+0x6c>
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	38 f5       	brcc	.+78     	; 0x1cb0 <DIO_u8setInputPullUpResistor+0x6c>
	{
		SET_BIT(DIO[Copy_PORT_ePort]->PORT,Copy_PIN_ePin);
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e3 58       	subi	r30, 0x83	; 131
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	a0 81       	ld	r26, Z
    1c74:	b1 81       	ldd	r27, Z+1	; 0x01
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	fc 01       	movw	r30, r24
    1c82:	e3 58       	subi	r30, 0x83	; 131
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	01 90       	ld	r0, Z+
    1c88:	f0 81       	ld	r31, Z
    1c8a:	e0 2d       	mov	r30, r0
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_u8setInputPullUpResistor+0x5e>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <DIO_u8setInputPullUpResistor+0x5a>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	8c 93       	st	X, r24
    1cac:	12 97       	sbiw	r26, 0x02	; 2
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_u8setInputPullUpResistor+0x70>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <ADC_Init>:

#define RT_OK    (u8)   0
#define RT_NOK   (u8)   1

void ADC_Init(ADC_refVolt_t copy_tReferenceVoltage)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <ADC_Init+0x6>
    1cc8:	0f 92       	push	r0
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_tReferenceVoltage)
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3b 83       	std	Y+3, r19	; 0x03
    1cd8:	2a 83       	std	Y+2, r18	; 0x02
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	51 f0       	breq	.+20     	; 0x1cf8 <ADC_Init+0x36>
    1ce4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	49 f1       	breq	.+82     	; 0x1d40 <ADC_Init+0x7e>
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	99 f0       	breq	.+38     	; 0x1d1c <ADC_Init+0x5a>
    1cf6:	34 c0       	rjmp	.+104    	; 0x1d60 <ADC_Init+0x9e>
    {
	case ADC_REFERENCE_AREF:
	/*
      * VREF = AREF
      */
	CLR_BIT(ADC->MUX,6);
    1cf8:	a4 e2       	ldi	r26, 0x24	; 36
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e4 e2       	ldi	r30, 0x24	; 36
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	83 81       	ldd	r24, Z+3	; 0x03
    1d02:	8f 7b       	andi	r24, 0xBF	; 191
    1d04:	13 96       	adiw	r26, 0x03	; 3
    1d06:	8c 93       	st	X, r24
	CLR_BIT(ADC->MUX,7);
    1d08:	a4 e2       	ldi	r26, 0x24	; 36
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e4 e2       	ldi	r30, 0x24	; 36
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	83 81       	ldd	r24, Z+3	; 0x03
    1d12:	8f 77       	andi	r24, 0x7F	; 127
    1d14:	13 96       	adiw	r26, 0x03	; 3
    1d16:	8c 93       	st	X, r24
    1d18:	13 97       	sbiw	r26, 0x03	; 3
    1d1a:	22 c0       	rjmp	.+68     	; 0x1d60 <ADC_Init+0x9e>

	case ADC_REFERENCE_AVCC:
		/*
	      * VREF = VCC
	      */
		SET_BIT(ADC->MUX,6);
    1d1c:	a4 e2       	ldi	r26, 0x24	; 36
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e4 e2       	ldi	r30, 0x24	; 36
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	83 81       	ldd	r24, Z+3	; 0x03
    1d26:	80 64       	ori	r24, 0x40	; 64
    1d28:	13 96       	adiw	r26, 0x03	; 3
    1d2a:	8c 93       	st	X, r24
		CLR_BIT(ADC->MUX,7);
    1d2c:	a4 e2       	ldi	r26, 0x24	; 36
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e4 e2       	ldi	r30, 0x24	; 36
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	8f 77       	andi	r24, 0x7F	; 127
    1d38:	13 96       	adiw	r26, 0x03	; 3
    1d3a:	8c 93       	st	X, r24
    1d3c:	13 97       	sbiw	r26, 0x03	; 3
    1d3e:	10 c0       	rjmp	.+32     	; 0x1d60 <ADC_Init+0x9e>

	case ADC_REFERENCE_INTRNAL:
		/*
	      * VREF = internal 2.56V
	      */
		SET_BIT(ADC->MUX,6);
    1d40:	a4 e2       	ldi	r26, 0x24	; 36
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e4 e2       	ldi	r30, 0x24	; 36
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	83 81       	ldd	r24, Z+3	; 0x03
    1d4a:	80 64       	ori	r24, 0x40	; 64
    1d4c:	13 96       	adiw	r26, 0x03	; 3
    1d4e:	8c 93       	st	X, r24
		SET_BIT(ADC->MUX,7);
    1d50:	a4 e2       	ldi	r26, 0x24	; 36
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e4 e2       	ldi	r30, 0x24	; 36
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	83 81       	ldd	r24, Z+3	; 0x03
    1d5a:	80 68       	ori	r24, 0x80	; 128
    1d5c:	13 96       	adiw	r26, 0x03	; 3
    1d5e:	8c 93       	st	X, r24
		break;
    }
	/*
	 * RESOLUTION = 10bit
	 */
	CLR_BIT(ADC->MUX,5);
    1d60:	a4 e2       	ldi	r26, 0x24	; 36
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e4 e2       	ldi	r30, 0x24	; 36
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	83 81       	ldd	r24, Z+3	; 0x03
    1d6a:	8f 7d       	andi	r24, 0xDF	; 223
    1d6c:	13 96       	adiw	r26, 0x03	; 3
    1d6e:	8c 93       	st	X, r24
	/*
	 * ADC ENABLE
	 */
	SET_BIT(ADC->SRA,7);
    1d70:	a4 e2       	ldi	r26, 0x24	; 36
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e4 e2       	ldi	r30, 0x24	; 36
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	12 96       	adiw	r26, 0x02	; 2
    1d7e:	8c 93       	st	X, r24
	/*
	 * Prescaler = 128
	 */
	SET_BIT(ADC->SRA,0);
    1d80:	a4 e2       	ldi	r26, 0x24	; 36
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e4 e2       	ldi	r30, 0x24	; 36
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	81 60       	ori	r24, 0x01	; 1
    1d8c:	12 96       	adiw	r26, 0x02	; 2
    1d8e:	8c 93       	st	X, r24
	SET_BIT(ADC->SRA,1);
    1d90:	a4 e2       	ldi	r26, 0x24	; 36
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e4 e2       	ldi	r30, 0x24	; 36
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	82 60       	ori	r24, 0x02	; 2
    1d9c:	12 96       	adiw	r26, 0x02	; 2
    1d9e:	8c 93       	st	X, r24
	SET_BIT(ADC->SRA,2);
    1da0:	a4 e2       	ldi	r26, 0x24	; 36
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e4 e2       	ldi	r30, 0x24	; 36
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	84 60       	ori	r24, 0x04	; 4
    1dac:	12 96       	adiw	r26, 0x02	; 2
    1dae:	8c 93       	st	X, r24
    1db0:	12 97       	sbiw	r26, 0x02	; 2
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <ADC_u16Channelread>:

u16 ADC_u16Channelread(u8 Copy_u8Channel)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <ADC_u16Channelread+0x6>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8b 83       	std	Y+3, r24	; 0x03
  // select the corresponding channel 0~7
  // ANDing with 7 will always keep the value
  // of Copy_u8Channel between 0 and 7
	ADC->MUX &= 0b11100000;  // AND operation with 0b11100000
    1dcc:	a4 e2       	ldi	r26, 0x24	; 36
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e4 e2       	ldi	r30, 0x24	; 36
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	83 81       	ldd	r24, Z+3	; 0x03
    1dd6:	80 7e       	andi	r24, 0xE0	; 224
    1dd8:	13 96       	adiw	r26, 0x03	; 3
    1dda:	8c 93       	st	X, r24
	ADC->MUX |= ( Copy_u8Channel ); // clears the bottom 3 bits before ORing
    1ddc:	a4 e2       	ldi	r26, 0x24	; 36
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e4 e2       	ldi	r30, 0x24	; 36
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	89 2b       	or	r24, r25
    1dea:	13 96       	adiw	r26, 0x03	; 3
    1dec:	8c 93       	st	X, r24

  // start single convertion
  // write 1 to ADSC
	SET_BIT(ADC->SRA,6);
    1dee:	a4 e2       	ldi	r26, 0x24	; 36
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e4 e2       	ldi	r30, 0x24	; 36
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	80 64       	ori	r24, 0x40	; 64
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	8c 93       	st	X, r24
    1dfe:	12 97       	sbiw	r26, 0x02	; 2

  // wait for conversion to complete
  // ADSC becomes 0 again
  // till then, run loop continuously
  u16 local_u16TimeoutCounter = 0;
    1e00:	1a 82       	std	Y+2, r1	; 0x02
    1e02:	19 82       	std	Y+1, r1	; 0x01
  while(GET_BIT(ADC->SRA,4)==0);
    1e04:	e4 e2       	ldi	r30, 0x24	; 36
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	82 95       	swap	r24
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	81 70       	andi	r24, 0x01	; 1
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	a9 f3       	breq	.-22     	; 0x1e04 <ADC_u16Channelread+0x46>

  SET_BIT(ADC->SRA,4);
    1e1a:	a4 e2       	ldi	r26, 0x24	; 36
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e4 e2       	ldi	r30, 0x24	; 36
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	80 61       	ori	r24, 0x10	; 16
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	8c 93       	st	X, r24
    1e2a:	12 97       	sbiw	r26, 0x02	; 2
  return ADC->DATA;
    1e2c:	e4 e2       	ldi	r30, 0x24	; 36
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <LM35_voidInit>:
#include "../LM35_tempSen/LM35_interface.h"

#define  NULL   (void*) 0

void LM35_voidInit(void)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDirection(PORT_A, LM35_CHANNEL_NUM, INPUT);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	ADC_Init(ADC_REFERENCE_INTRNAL);
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <ADC_Init>
}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LM35_voidGetTemperature>:


void LM35_voidGetTemperature(u16* copy_u16Temperature)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LM35_voidGetTemperature+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LM35_voidGetTemperature+0x8>
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LM35_voidGetTemperature+0xa>
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
	if(copy_u16Temperature!=NULL)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	59 f1       	breq	.+86     	; 0x1ece <LM35_voidGetTemperature+0x70>
	{
		u16 local_u16DigitalVal, local_u16AnalogVal;

		local_u16DigitalVal = ADC_u16Channelread(LM35_CHANNEL_NUM);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <ADC_u16Channelread>
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
		
		// depend on Refrence volt AVCC (5V)
		local_u16AnalogVal = ((u32)local_u16DigitalVal*2560)/1024;
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	cc 01       	movw	r24, r24
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3a e0       	ldi	r19, 0x0A	; 10
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__mulsi3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	07 2e       	mov	r0, r23
    1ea2:	7a e0       	ldi	r23, 0x0A	; 10
    1ea4:	b6 95       	lsr	r27
    1ea6:	a7 95       	ror	r26
    1ea8:	97 95       	ror	r25
    1eaa:	87 95       	ror	r24
    1eac:	7a 95       	dec	r23
    1eae:	d1 f7       	brne	.-12     	; 0x1ea4 <LM35_voidGetTemperature+0x46>
    1eb0:	70 2d       	mov	r23, r0
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01

		*copy_u16Temperature = local_u16AnalogVal/10;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	2a e0       	ldi	r18, 0x0A	; 10
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <__udivmodhi4>
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
	}
	else
	{
		// return Error State
	}
}
    1ece:	26 96       	adiw	r28, 0x06	; 6
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <PRV_voidEnableTriggerWrite>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character);
void LCD_4_BitvidsendCommand(u8 Copy_u8command);
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character);

static void PRV_voidEnableTriggerWrite(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	2e 97       	sbiw	r28, 0x0e	; 14
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
	/* Enable Pulse *//* H => L */
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e8       	ldi	r26, 0x80	; 128
    1f04:	bf e3       	ldi	r27, 0x3F	; 63
    1f06:	8b 87       	std	Y+11, r24	; 0x0b
    1f08:	9c 87       	std	Y+12, r25	; 0x0c
    1f0a:	ad 87       	std	Y+13, r26	; 0x0d
    1f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8f 83       	std	Y+7, r24	; 0x07
    1f28:	98 87       	std	Y+8, r25	; 0x08
    1f2a:	a9 87       	std	Y+9, r26	; 0x09
    1f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <PRV_voidEnableTriggerWrite+0xd0>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <PRV_voidEnableTriggerWrite+0xbe>
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <PRV_voidEnableTriggerWrite+0xb2>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <PRV_voidEnableTriggerWrite+0xfa>
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
}
    1fec:	2e 96       	adiw	r28, 0x0e	; 14
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort(u8 copy_u8Value)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	0f 92       	push	r0
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
	if(0 == GET_BIT(copy_u8Value,0))
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	90 70       	andi	r25, 0x00	; 0
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	31 f4       	brne	.+12     	; 0x2024 <PRV_voidWriteHalfPort+0x26>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_4, LOW);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	64 e0       	ldi	r22, 0x04	; 4
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2022:	05 c0       	rjmp	.+10     	; 0x202e <PRV_voidWriteHalfPort+0x30>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_4, HIGH);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	64 e0       	ldi	r22, 0x04	; 4
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,1))
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	86 95       	lsr	r24
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	31 f4       	brne	.+12     	; 0x204a <PRV_voidWriteHalfPort+0x4c>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_5, LOW);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	65 e0       	ldi	r22, 0x05	; 5
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <PRV_voidWriteHalfPort+0x56>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_5, HIGH);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	65 e0       	ldi	r22, 0x05	; 5
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,2))
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	86 95       	lsr	r24
    2058:	86 95       	lsr	r24
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	81 70       	andi	r24, 0x01	; 1
    2060:	90 70       	andi	r25, 0x00	; 0
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	31 f4       	brne	.+12     	; 0x2072 <PRV_voidWriteHalfPort+0x74>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_6, LOW);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	66 e0       	ldi	r22, 0x06	; 6
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2070:	05 c0       	rjmp	.+10     	; 0x207c <PRV_voidWriteHalfPort+0x7e>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_6, HIGH);
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	66 e0       	ldi	r22, 0x06	; 6
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,3))
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	86 95       	lsr	r24
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	31 f4       	brne	.+12     	; 0x209c <PRV_voidWriteHalfPort+0x9e>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_7, LOW);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	67 e0       	ldi	r22, 0x07	; 7
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <PRV_voidWriteHalfPort+0xa8>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_7, HIGH);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	67 e0       	ldi	r22, 0x07	; 7
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
     DIO_voidSetPinValue(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(copy_u8Value,0));
	 DIO_voidSetPinValue(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(copy_u8Value,1));
	 DIO_voidSetPinValue(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value,2));
	 DIO_voidSetPinValue(LCD_D7_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value,3));
	 */
}
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <LCD_4_BitvidInit>:

void LCD_4_BitvidInit(void)
{
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	cc 54       	subi	r28, 0x4C	; 76
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_4, OUTPUT);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_5, OUTPUT);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	65 e0       	ldi	r22, 0x05	; 5
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_6, OUTPUT);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	66 e0       	ldi	r22, 0x06	; 6
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_7, OUTPUT);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	67 e0       	ldi	r22, 0x07	; 7
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>

	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
    210e:	fe 01       	movw	r30, r28
    2110:	e7 5b       	subi	r30, 0xB7	; 183
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	ac e0       	ldi	r26, 0x0C	; 12
    211a:	b2 e4       	ldi	r27, 0x42	; 66
    211c:	80 83       	st	Z, r24
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	8e 01       	movw	r16, r28
    2126:	0b 5b       	subi	r16, 0xBB	; 187
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e7 5b       	subi	r30, 0xB7	; 183
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a ef       	ldi	r20, 0xFA	; 250
    213e:	54 e4       	ldi	r21, 0x44	; 68
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2152:	fe 01       	movw	r30, r28
    2154:	eb 5b       	subi	r30, 0xBB	; 187
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	44 f4       	brge	.+16     	; 0x2180 <LCD_4_BitvidInit+0xd2>
		__ticks = 1;
    2170:	fe 01       	movw	r30, r28
    2172:	ed 5b       	subi	r30, 0xBD	; 189
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
    217e:	64 c0       	rjmp	.+200    	; 0x2248 <LCD_4_BitvidInit+0x19a>
	else if (__tmp > 65535)
    2180:	fe 01       	movw	r30, r28
    2182:	eb 5b       	subi	r30, 0xBB	; 187
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	0c f0       	brlt	.+2      	; 0x21a0 <LCD_4_BitvidInit+0xf2>
    219e:	43 c0       	rjmp	.+134    	; 0x2226 <LCD_4_BitvidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	fe 01       	movw	r30, r28
    21a2:	e7 5b       	subi	r30, 0xB7	; 183
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8e 01       	movw	r16, r28
    21c0:	0d 5b       	subi	r16, 0xBD	; 189
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <LCD_4_BitvidInit+0x168>
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 5b       	subi	r30, 0xBF	; 191
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	88 ec       	ldi	r24, 0xC8	; 200
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
    21e6:	fe 01       	movw	r30, r28
    21e8:	ef 5b       	subi	r30, 0xBF	; 191
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_4_BitvidInit+0x142>
    21f4:	fe 01       	movw	r30, r28
    21f6:	ef 5b       	subi	r30, 0xBF	; 191
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	de 01       	movw	r26, r28
    2200:	ad 5b       	subi	r26, 0xBD	; 189
    2202:	bf 4f       	sbci	r27, 0xFF	; 255
    2204:	fe 01       	movw	r30, r28
    2206:	ed 5b       	subi	r30, 0xBD	; 189
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	9c 93       	st	X, r25
    2214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	fe 01       	movw	r30, r28
    2218:	ed 5b       	subi	r30, 0xBD	; 189
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	d1 f6       	brne	.-76     	; 0x21d8 <LCD_4_BitvidInit+0x12a>
    2224:	24 c0       	rjmp	.+72     	; 0x226e <LCD_4_BitvidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	8e 01       	movw	r16, r28
    2228:	0d 5b       	subi	r16, 0xBD	; 189
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	fe 01       	movw	r30, r28
    222e:	eb 5b       	subi	r30, 0xBB	; 187
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	f8 01       	movw	r30, r16
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	fe 01       	movw	r30, r28
    224a:	ed 5b       	subi	r30, 0xBD	; 189
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	fe 01       	movw	r30, r28
    2254:	ff 96       	adiw	r30, 0x3f	; 63
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	fe 01       	movw	r30, r28
    225c:	ff 96       	adiw	r30, 0x3f	; 63
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_4_BitvidInit+0x1b4>
    2266:	fe 01       	movw	r30, r28
    2268:	ff 96       	adiw	r30, 0x3f	; 63
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
	_delay_ms(35);

	/* Function Set (2Lines, 5*7 font)*/
	// set Rs pin = 0 (command)
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	// set RW pin = 0 (write)
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	61 e0       	ldi	r22, 0x01	; 1
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	PRV_voidWriteHalfPort(0b0010);
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    2288:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PRV_voidEnableTriggerWrite>
	LCD_4_BitvidsendCommand(0b00101000);
    228c:	88 e2       	ldi	r24, 0x28	; 40
    228e:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a4 e3       	ldi	r26, 0x34	; 52
    2298:	b2 e4       	ldi	r27, 0x42	; 66
    229a:	8b af       	std	Y+59, r24	; 0x3b
    229c:	9c af       	std	Y+60, r25	; 0x3c
    229e:	ad af       	std	Y+61, r26	; 0x3d
    22a0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a2:	6b ad       	ldd	r22, Y+59	; 0x3b
    22a4:	7c ad       	ldd	r23, Y+60	; 0x3c
    22a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22aa:	2b ea       	ldi	r18, 0xAB	; 171
    22ac:	3a ea       	ldi	r19, 0xAA	; 170
    22ae:	4a e2       	ldi	r20, 0x2A	; 42
    22b0:	50 e4       	ldi	r21, 0x40	; 64
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8f ab       	std	Y+55, r24	; 0x37
    22bc:	98 af       	std	Y+56, r25	; 0x38
    22be:	a9 af       	std	Y+57, r26	; 0x39
    22c0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    22c2:	6f a9       	ldd	r22, Y+55	; 0x37
    22c4:	78 ad       	ldd	r23, Y+56	; 0x38
    22c6:	89 ad       	ldd	r24, Y+57	; 0x39
    22c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	1c f4       	brge	.+6      	; 0x22e0 <LCD_4_BitvidInit+0x232>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	8e ab       	std	Y+54, r24	; 0x36
    22de:	91 c0       	rjmp	.+290    	; 0x2402 <LCD_4_BitvidInit+0x354>
	else if (__tmp > 255)
    22e0:	6f a9       	ldd	r22, Y+55	; 0x37
    22e2:	78 ad       	ldd	r23, Y+56	; 0x38
    22e4:	89 ad       	ldd	r24, Y+57	; 0x39
    22e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	53 e4       	ldi	r21, 0x43	; 67
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	0c f0       	brlt	.+2      	; 0x22fa <LCD_4_BitvidInit+0x24c>
    22f8:	7b c0       	rjmp	.+246    	; 0x23f0 <LCD_4_BitvidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    22fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    22fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    22fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2300:	9e ad       	ldd	r25, Y+62	; 0x3e
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	54 e4       	ldi	r21, 0x44	; 68
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8a ab       	std	Y+50, r24	; 0x32
    2314:	9b ab       	std	Y+51, r25	; 0x33
    2316:	ac ab       	std	Y+52, r26	; 0x34
    2318:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6a a9       	ldd	r22, Y+50	; 0x32
    231c:	7b a9       	ldd	r23, Y+51	; 0x33
    231e:	8c a9       	ldd	r24, Y+52	; 0x34
    2320:	9d a9       	ldd	r25, Y+53	; 0x35
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8e a7       	std	Y+46, r24	; 0x2e
    2334:	9f a7       	std	Y+47, r25	; 0x2f
    2336:	a8 ab       	std	Y+48, r26	; 0x30
    2338:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    233a:	6e a5       	ldd	r22, Y+46	; 0x2e
    233c:	7f a5       	ldd	r23, Y+47	; 0x2f
    233e:	88 a9       	ldd	r24, Y+48	; 0x30
    2340:	99 a9       	ldd	r25, Y+49	; 0x31
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_4_BitvidInit+0x2ae>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9d a7       	std	Y+45, r25	; 0x2d
    2358:	8c a7       	std	Y+44, r24	; 0x2c
    235a:	3f c0       	rjmp	.+126    	; 0x23da <LCD_4_BitvidInit+0x32c>
	else if (__tmp > 65535)
    235c:	6e a5       	ldd	r22, Y+46	; 0x2e
    235e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2360:	88 a9       	ldd	r24, Y+48	; 0x30
    2362:	99 a9       	ldd	r25, Y+49	; 0x31
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <LCD_4_BitvidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6a a9       	ldd	r22, Y+50	; 0x32
    2376:	7b a9       	ldd	r23, Y+51	; 0x33
    2378:	8c a9       	ldd	r24, Y+52	; 0x34
    237a:	9d a9       	ldd	r25, Y+53	; 0x35
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9d a7       	std	Y+45, r25	; 0x2d
    239a:	8c a7       	std	Y+44, r24	; 0x2c
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_4_BitvidInit+0x30e>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9b a7       	std	Y+43, r25	; 0x2b
    23a4:	8a a7       	std	Y+42, r24	; 0x2a
    23a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    23a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_4_BitvidInit+0x2fc>
    23ae:	9b a7       	std	Y+43, r25	; 0x2b
    23b0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    23b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9d a7       	std	Y+45, r25	; 0x2d
    23ba:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    23be:	9d a5       	ldd	r25, Y+45	; 0x2d
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_4_BitvidInit+0x2f0>
    23c4:	24 c0       	rjmp	.+72     	; 0x240e <LCD_4_BitvidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6e a5       	ldd	r22, Y+46	; 0x2e
    23c8:	7f a5       	ldd	r23, Y+47	; 0x2f
    23ca:	88 a9       	ldd	r24, Y+48	; 0x30
    23cc:	99 a9       	ldd	r25, Y+49	; 0x31
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9d a7       	std	Y+45, r25	; 0x2d
    23d8:	8c a7       	std	Y+44, r24	; 0x2c
    23da:	8c a5       	ldd	r24, Y+44	; 0x2c
    23dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    23de:	99 a7       	std	Y+41, r25	; 0x29
    23e0:	88 a7       	std	Y+40, r24	; 0x28
    23e2:	88 a5       	ldd	r24, Y+40	; 0x28
    23e4:	99 a5       	ldd	r25, Y+41	; 0x29
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_4_BitvidInit+0x338>
    23ea:	99 a7       	std	Y+41, r25	; 0x29
    23ec:	88 a7       	std	Y+40, r24	; 0x28
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_4_BitvidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23f0:	6f a9       	ldd	r22, Y+55	; 0x37
    23f2:	78 ad       	ldd	r23, Y+56	; 0x38
    23f4:	89 ad       	ldd	r24, Y+57	; 0x39
    23f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8e ab       	std	Y+54, r24	; 0x36
    2402:	8e a9       	ldd	r24, Y+54	; 0x36
    2404:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2406:	8f a1       	ldd	r24, Y+39	; 0x27
    2408:	8a 95       	dec	r24
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_4_BitvidInit+0x35a>
    240c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);

	/* Display On/Off Control (DisplayOn, Cursor on, Blink on) */
	LCD_4_BitvidsendCommand(0b00001111);
    240e:	8f e0       	ldi	r24, 0x0F	; 15
    2410:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a4 e3       	ldi	r26, 0x34	; 52
    241a:	b2 e4       	ldi	r27, 0x42	; 66
    241c:	8b a3       	std	Y+35, r24	; 0x23
    241e:	9c a3       	std	Y+36, r25	; 0x24
    2420:	ad a3       	std	Y+37, r26	; 0x25
    2422:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	2b ea       	ldi	r18, 0xAB	; 171
    242e:	3a ea       	ldi	r19, 0xAA	; 170
    2430:	4a e2       	ldi	r20, 0x2A	; 42
    2432:	50 e4       	ldi	r21, 0x40	; 64
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8f 8f       	std	Y+31, r24	; 0x1f
    243e:	98 a3       	std	Y+32, r25	; 0x20
    2440:	a9 a3       	std	Y+33, r26	; 0x21
    2442:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2444:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2446:	78 a1       	ldd	r23, Y+32	; 0x20
    2448:	89 a1       	ldd	r24, Y+33	; 0x21
    244a:	9a a1       	ldd	r25, Y+34	; 0x22
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	1c f4       	brge	.+6      	; 0x2462 <LCD_4_BitvidInit+0x3b4>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	8e 8f       	std	Y+30, r24	; 0x1e
    2460:	91 c0       	rjmp	.+290    	; 0x2584 <LCD_4_BitvidInit+0x4d6>
	else if (__tmp > 255)
    2462:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2464:	78 a1       	ldd	r23, Y+32	; 0x20
    2466:	89 a1       	ldd	r24, Y+33	; 0x21
    2468:	9a a1       	ldd	r25, Y+34	; 0x22
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	53 e4       	ldi	r21, 0x43	; 67
    2472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	0c f0       	brlt	.+2      	; 0x247c <LCD_4_BitvidInit+0x3ce>
    247a:	7b c0       	rjmp	.+246    	; 0x2572 <LCD_4_BitvidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    247c:	6b a1       	ldd	r22, Y+35	; 0x23
    247e:	7c a1       	ldd	r23, Y+36	; 0x24
    2480:	8d a1       	ldd	r24, Y+37	; 0x25
    2482:	9e a1       	ldd	r25, Y+38	; 0x26
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a e7       	ldi	r20, 0x7A	; 122
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8a 8f       	std	Y+26, r24	; 0x1a
    2496:	9b 8f       	std	Y+27, r25	; 0x1b
    2498:	ac 8f       	std	Y+28, r26	; 0x1c
    249a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    249e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a ef       	ldi	r20, 0xFA	; 250
    24aa:	54 e4       	ldi	r21, 0x44	; 68
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	8e 8b       	std	Y+22, r24	; 0x16
    24b6:	9f 8b       	std	Y+23, r25	; 0x17
    24b8:	a8 8f       	std	Y+24, r26	; 0x18
    24ba:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24bc:	6e 89       	ldd	r22, Y+22	; 0x16
    24be:	7f 89       	ldd	r23, Y+23	; 0x17
    24c0:	88 8d       	ldd	r24, Y+24	; 0x18
    24c2:	99 8d       	ldd	r25, Y+25	; 0x19
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	2c f4       	brge	.+10     	; 0x24de <LCD_4_BitvidInit+0x430>
		__ticks = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9d 8b       	std	Y+21, r25	; 0x15
    24da:	8c 8b       	std	Y+20, r24	; 0x14
    24dc:	3f c0       	rjmp	.+126    	; 0x255c <LCD_4_BitvidInit+0x4ae>
	else if (__tmp > 65535)
    24de:	6e 89       	ldd	r22, Y+22	; 0x16
    24e0:	7f 89       	ldd	r23, Y+23	; 0x17
    24e2:	88 8d       	ldd	r24, Y+24	; 0x18
    24e4:	99 8d       	ldd	r25, Y+25	; 0x19
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	57 e4       	ldi	r21, 0x47	; 71
    24ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	4c f5       	brge	.+82     	; 0x2548 <LCD_4_BitvidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24f8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e2       	ldi	r20, 0x20	; 32
    2504:	51 e4       	ldi	r21, 0x41	; 65
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9d 8b       	std	Y+21, r25	; 0x15
    251c:	8c 8b       	std	Y+20, r24	; 0x14
    251e:	0f c0       	rjmp	.+30     	; 0x253e <LCD_4_BitvidInit+0x490>
    2520:	88 ec       	ldi	r24, 0xC8	; 200
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9b 8b       	std	Y+19, r25	; 0x13
    2526:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2528:	8a 89       	ldd	r24, Y+18	; 0x12
    252a:	9b 89       	ldd	r25, Y+19	; 0x13
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_4_BitvidInit+0x47e>
    2530:	9b 8b       	std	Y+19, r25	; 0x13
    2532:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	8c 89       	ldd	r24, Y+20	; 0x14
    2536:	9d 89       	ldd	r25, Y+21	; 0x15
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	9d 8b       	std	Y+21, r25	; 0x15
    253c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253e:	8c 89       	ldd	r24, Y+20	; 0x14
    2540:	9d 89       	ldd	r25, Y+21	; 0x15
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	69 f7       	brne	.-38     	; 0x2520 <LCD_4_BitvidInit+0x472>
    2546:	24 c0       	rjmp	.+72     	; 0x2590 <LCD_4_BitvidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	6e 89       	ldd	r22, Y+22	; 0x16
    254a:	7f 89       	ldd	r23, Y+23	; 0x17
    254c:	88 8d       	ldd	r24, Y+24	; 0x18
    254e:	99 8d       	ldd	r25, Y+25	; 0x19
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9d 8b       	std	Y+21, r25	; 0x15
    255a:	8c 8b       	std	Y+20, r24	; 0x14
    255c:	8c 89       	ldd	r24, Y+20	; 0x14
    255e:	9d 89       	ldd	r25, Y+21	; 0x15
    2560:	99 8b       	std	Y+17, r25	; 0x11
    2562:	88 8b       	std	Y+16, r24	; 0x10
    2564:	88 89       	ldd	r24, Y+16	; 0x10
    2566:	99 89       	ldd	r25, Y+17	; 0x11
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_4_BitvidInit+0x4ba>
    256c:	99 8b       	std	Y+17, r25	; 0x11
    256e:	88 8b       	std	Y+16, r24	; 0x10
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <LCD_4_BitvidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2572:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2574:	78 a1       	ldd	r23, Y+32	; 0x20
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8e 8f       	std	Y+30, r24	; 0x1e
    2584:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2586:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	8a 95       	dec	r24
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_4_BitvidInit+0x4dc>
    258e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	/* Display Clear */
	LCD_4_BitvidsendCommand(0b00000001);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a0 e0       	ldi	r26, 0x00	; 0
    259c:	b0 e4       	ldi	r27, 0x40	; 64
    259e:	8b 87       	std	Y+11, r24	; 0x0b
    25a0:	9c 87       	std	Y+12, r25	; 0x0c
    25a2:	ad 87       	std	Y+13, r26	; 0x0d
    25a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a ef       	ldi	r20, 0xFA	; 250
    25b4:	54 e4       	ldi	r21, 0x44	; 68
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8f 83       	std	Y+7, r24	; 0x07
    25c0:	98 87       	std	Y+8, r25	; 0x08
    25c2:	a9 87       	std	Y+9, r26	; 0x09
    25c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e8       	ldi	r20, 0x80	; 128
    25d4:	5f e3       	ldi	r21, 0x3F	; 63
    25d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25da:	88 23       	and	r24, r24
    25dc:	2c f4       	brge	.+10     	; 0x25e8 <LCD_4_BitvidInit+0x53a>
		__ticks = 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	3f c0       	rjmp	.+126    	; 0x2666 <LCD_4_BitvidInit+0x5b8>
	else if (__tmp > 65535)
    25e8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ea:	78 85       	ldd	r23, Y+8	; 0x08
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	4c f5       	brge	.+82     	; 0x2652 <LCD_4_BitvidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	6b 85       	ldd	r22, Y+11	; 0x0b
    2602:	7c 85       	ldd	r23, Y+12	; 0x0c
    2604:	8d 85       	ldd	r24, Y+13	; 0x0d
    2606:	9e 85       	ldd	r25, Y+14	; 0x0e
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <LCD_4_BitvidInit+0x59a>
    262a:	88 ec       	ldi	r24, 0xC8	; 200
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_4_BitvidInit+0x588>
    263a:	9c 83       	std	Y+4, r25	; 0x04
    263c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	69 f7       	brne	.-38     	; 0x262a <LCD_4_BitvidInit+0x57c>
    2650:	14 c0       	rjmp	.+40     	; 0x267a <LCD_4_BitvidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2652:	6f 81       	ldd	r22, Y+7	; 0x07
    2654:	78 85       	ldd	r23, Y+8	; 0x08
    2656:	89 85       	ldd	r24, Y+9	; 0x09
    2658:	9a 85       	ldd	r25, Y+10	; 0x0a
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	9e 81       	ldd	r25, Y+6	; 0x06
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	9a 81       	ldd	r25, Y+2	; 0x02
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_4_BitvidInit+0x5c4>
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* Entery Mode Set (Increment on, Shift off) */
	LCD_4_BitvidsendCommand(0b00000110);
    267a:	86 e0       	ldi	r24, 0x06	; 6
    267c:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
}
    2680:	c4 5b       	subi	r28, 0xB4	; 180
    2682:	df 4f       	sbci	r29, 0xFF	; 255
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	08 95       	ret

00002698 <LCD_4_BitvidsendCommand>:
void LCD_4_BitvidsendCommand(u8 Copy_u8command)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	89 83       	std	Y+1, r24	; 0x01
	// set Rs pin = 0 (command)
		DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	62 e0       	ldi	r22, 0x02	; 2
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>

		// set RW pin = 0 (write)
		DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    26ae:	83 e0       	ldi	r24, 0x03	; 3
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	40 e0       	ldi	r20, 0x00	; 0
    26b4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>

		// Write The Most 4 bits Of command on Data Pins
		PRV_voidWriteHalfPort(Copy_u8command>>4);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	82 95       	swap	r24
    26bc:	8f 70       	andi	r24, 0x0F	; 15
    26be:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    26c2:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PRV_voidEnableTriggerWrite>

		// Write The Least 4 bits Of command on Data Pins
		PRV_voidWriteHalfPort(Copy_u8command);
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    26cc:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PRV_voidEnableTriggerWrite>
}
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <LCD_4_BitvidwriteCharacter>:

void LCD_4_BitvidwriteCharacter(u8 Copy_u8character)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	0f 92       	push	r0
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	89 83       	std	Y+1, r24	; 0x01
	// set Rs pin = 1 (data)
		DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>

		// set RW pin = 0 (write)
		DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>

		// Write The Most 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(Copy_u8character>>4);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	82 95       	swap	r24
    26fc:	8f 70       	andi	r24, 0x0F	; 15
    26fe:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2702:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PRV_voidEnableTriggerWrite>

		// Write The Least 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(Copy_u8character);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    270c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PRV_voidEnableTriggerWrite>
}
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <LCD_8_BitvidInit>:

void LCD_8_BitvidInit(void)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	e8 97       	sbiw	r28, 0x38	; 56
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,FULL_OUTPUT);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	6f ef       	ldi	r22, 0xFF	; 255
    2730:	0e 94 31 0c 	call	0x1862	; 0x1862 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	62 e0       	ldi	r22, 0x02	; 2
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e2       	ldi	r26, 0x20	; 32
    2758:	b2 e4       	ldi	r27, 0x42	; 66
    275a:	8d ab       	std	Y+53, r24	; 0x35
    275c:	9e ab       	std	Y+54, r25	; 0x36
    275e:	af ab       	std	Y+55, r26	; 0x37
    2760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6d a9       	ldd	r22, Y+53	; 0x35
    2764:	7e a9       	ldd	r23, Y+54	; 0x36
    2766:	8f a9       	ldd	r24, Y+55	; 0x37
    2768:	98 ad       	ldd	r25, Y+56	; 0x38
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a ef       	ldi	r20, 0xFA	; 250
    2770:	54 e4       	ldi	r21, 0x44	; 68
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	89 ab       	std	Y+49, r24	; 0x31
    277c:	9a ab       	std	Y+50, r25	; 0x32
    277e:	ab ab       	std	Y+51, r26	; 0x33
    2780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2782:	69 a9       	ldd	r22, Y+49	; 0x31
    2784:	7a a9       	ldd	r23, Y+50	; 0x32
    2786:	8b a9       	ldd	r24, Y+51	; 0x33
    2788:	9c a9       	ldd	r25, Y+52	; 0x34
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <LCD_8_BitvidInit+0x8c>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	98 ab       	std	Y+48, r25	; 0x30
    27a0:	8f a7       	std	Y+47, r24	; 0x2f
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <LCD_8_BitvidInit+0x10a>
	else if (__tmp > 65535)
    27a4:	69 a9       	ldd	r22, Y+49	; 0x31
    27a6:	7a a9       	ldd	r23, Y+50	; 0x32
    27a8:	8b a9       	ldd	r24, Y+51	; 0x33
    27aa:	9c a9       	ldd	r25, Y+52	; 0x34
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <LCD_8_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6d a9       	ldd	r22, Y+53	; 0x35
    27be:	7e a9       	ldd	r23, Y+54	; 0x36
    27c0:	8f a9       	ldd	r24, Y+55	; 0x37
    27c2:	98 ad       	ldd	r25, Y+56	; 0x38
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <LCD_8_BitvidInit+0xec>
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e a7       	std	Y+46, r25	; 0x2e
    27ec:	8d a7       	std	Y+45, r24	; 0x2d
    27ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_8_BitvidInit+0xda>
    27f6:	9e a7       	std	Y+46, r25	; 0x2e
    27f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fc:	98 a9       	ldd	r25, Y+48	; 0x30
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	98 ab       	std	Y+48, r25	; 0x30
    2802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8f a5       	ldd	r24, Y+47	; 0x2f
    2806:	98 a9       	ldd	r25, Y+48	; 0x30
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <LCD_8_BitvidInit+0xce>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <LCD_8_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	69 a9       	ldd	r22, Y+49	; 0x31
    2810:	7a a9       	ldd	r23, Y+50	; 0x32
    2812:	8b a9       	ldd	r24, Y+51	; 0x33
    2814:	9c a9       	ldd	r25, Y+52	; 0x34
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	98 ab       	std	Y+48, r25	; 0x30
    2820:	8f a7       	std	Y+47, r24	; 0x2f
    2822:	8f a5       	ldd	r24, Y+47	; 0x2f
    2824:	98 a9       	ldd	r25, Y+48	; 0x30
    2826:	9c a7       	std	Y+44, r25	; 0x2c
    2828:	8b a7       	std	Y+43, r24	; 0x2b
    282a:	8b a5       	ldd	r24, Y+43	; 0x2b
    282c:	9c a5       	ldd	r25, Y+44	; 0x2c
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_8_BitvidInit+0x116>
    2832:	9c a7       	std	Y+44, r25	; 0x2c
    2834:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_8_BitvidsendCommand(LCD_8_BIT_FUNCTION_SET_CMD);
    2836:	88 e3       	ldi	r24, 0x38	; 56
    2838:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a0 e8       	ldi	r26, 0x80	; 128
    2842:	bf e3       	ldi	r27, 0x3F	; 63
    2844:	8f a3       	std	Y+39, r24	; 0x27
    2846:	98 a7       	std	Y+40, r25	; 0x28
    2848:	a9 a7       	std	Y+41, r26	; 0x29
    284a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284c:	6f a1       	ldd	r22, Y+39	; 0x27
    284e:	78 a5       	ldd	r23, Y+40	; 0x28
    2850:	89 a5       	ldd	r24, Y+41	; 0x29
    2852:	9a a5       	ldd	r25, Y+42	; 0x2a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a ef       	ldi	r20, 0xFA	; 250
    285a:	54 e4       	ldi	r21, 0x44	; 68
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8b a3       	std	Y+35, r24	; 0x23
    2866:	9c a3       	std	Y+36, r25	; 0x24
    2868:	ad a3       	std	Y+37, r26	; 0x25
    286a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    286c:	6b a1       	ldd	r22, Y+35	; 0x23
    286e:	7c a1       	ldd	r23, Y+36	; 0x24
    2870:	8d a1       	ldd	r24, Y+37	; 0x25
    2872:	9e a1       	ldd	r25, Y+38	; 0x26
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	2c f4       	brge	.+10     	; 0x288e <LCD_8_BitvidInit+0x176>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9a a3       	std	Y+34, r25	; 0x22
    288a:	89 a3       	std	Y+33, r24	; 0x21
    288c:	3f c0       	rjmp	.+126    	; 0x290c <LCD_8_BitvidInit+0x1f4>
	else if (__tmp > 65535)
    288e:	6b a1       	ldd	r22, Y+35	; 0x23
    2890:	7c a1       	ldd	r23, Y+36	; 0x24
    2892:	8d a1       	ldd	r24, Y+37	; 0x25
    2894:	9e a1       	ldd	r25, Y+38	; 0x26
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	4c f5       	brge	.+82     	; 0x28f8 <LCD_8_BitvidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a6:	6f a1       	ldd	r22, Y+39	; 0x27
    28a8:	78 a5       	ldd	r23, Y+40	; 0x28
    28aa:	89 a5       	ldd	r24, Y+41	; 0x29
    28ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e2       	ldi	r20, 0x20	; 32
    28b4:	51 e4       	ldi	r21, 0x41	; 65
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9a a3       	std	Y+34, r25	; 0x22
    28cc:	89 a3       	std	Y+33, r24	; 0x21
    28ce:	0f c0       	rjmp	.+30     	; 0x28ee <LCD_8_BitvidInit+0x1d6>
    28d0:	88 ec       	ldi	r24, 0xC8	; 200
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	98 a3       	std	Y+32, r25	; 0x20
    28d6:	8f 8f       	std	Y+31, r24	; 0x1f
    28d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28da:	98 a1       	ldd	r25, Y+32	; 0x20
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <LCD_8_BitvidInit+0x1c4>
    28e0:	98 a3       	std	Y+32, r25	; 0x20
    28e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e4:	89 a1       	ldd	r24, Y+33	; 0x21
    28e6:	9a a1       	ldd	r25, Y+34	; 0x22
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	9a a3       	std	Y+34, r25	; 0x22
    28ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	9a a1       	ldd	r25, Y+34	; 0x22
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	69 f7       	brne	.-38     	; 0x28d0 <LCD_8_BitvidInit+0x1b8>
    28f6:	14 c0       	rjmp	.+40     	; 0x2920 <LCD_8_BitvidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f8:	6b a1       	ldd	r22, Y+35	; 0x23
    28fa:	7c a1       	ldd	r23, Y+36	; 0x24
    28fc:	8d a1       	ldd	r24, Y+37	; 0x25
    28fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9a a3       	std	Y+34, r25	; 0x22
    290a:	89 a3       	std	Y+33, r24	; 0x21
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	9e 8f       	std	Y+30, r25	; 0x1e
    2912:	8d 8f       	std	Y+29, r24	; 0x1d
    2914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2916:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_8_BitvidInit+0x200>
    291c:	9e 8f       	std	Y+30, r25	; 0x1e
    291e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_ON_CMD);
    2920:	8c e0       	ldi	r24, 0x0C	; 12
    2922:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e8       	ldi	r26, 0x80	; 128
    292c:	bf e3       	ldi	r27, 0x3F	; 63
    292e:	89 8f       	std	Y+25, r24	; 0x19
    2930:	9a 8f       	std	Y+26, r25	; 0x1a
    2932:	ab 8f       	std	Y+27, r26	; 0x1b
    2934:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2936:	69 8d       	ldd	r22, Y+25	; 0x19
    2938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    293a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a ef       	ldi	r20, 0xFA	; 250
    2944:	54 e4       	ldi	r21, 0x44	; 68
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8d 8b       	std	Y+21, r24	; 0x15
    2950:	9e 8b       	std	Y+22, r25	; 0x16
    2952:	af 8b       	std	Y+23, r26	; 0x17
    2954:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2956:	6d 89       	ldd	r22, Y+21	; 0x15
    2958:	7e 89       	ldd	r23, Y+22	; 0x16
    295a:	8f 89       	ldd	r24, Y+23	; 0x17
    295c:	98 8d       	ldd	r25, Y+24	; 0x18
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e8       	ldi	r20, 0x80	; 128
    2964:	5f e3       	ldi	r21, 0x3F	; 63
    2966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    296a:	88 23       	and	r24, r24
    296c:	2c f4       	brge	.+10     	; 0x2978 <LCD_8_BitvidInit+0x260>
		__ticks = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 8b       	std	Y+20, r25	; 0x14
    2974:	8b 8b       	std	Y+19, r24	; 0x13
    2976:	3f c0       	rjmp	.+126    	; 0x29f6 <LCD_8_BitvidInit+0x2de>
	else if (__tmp > 65535)
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	3f ef       	ldi	r19, 0xFF	; 255
    2984:	4f e7       	ldi	r20, 0x7F	; 127
    2986:	57 e4       	ldi	r21, 0x47	; 71
    2988:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298c:	18 16       	cp	r1, r24
    298e:	4c f5       	brge	.+82     	; 0x29e2 <LCD_8_BitvidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2990:	69 8d       	ldd	r22, Y+25	; 0x19
    2992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e2       	ldi	r20, 0x20	; 32
    299e:	51 e4       	ldi	r21, 0x41	; 65
    29a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9c 8b       	std	Y+20, r25	; 0x14
    29b6:	8b 8b       	std	Y+19, r24	; 0x13
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <LCD_8_BitvidInit+0x2c0>
    29ba:	88 ec       	ldi	r24, 0xC8	; 200
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9a 8b       	std	Y+18, r25	; 0x12
    29c0:	89 8b       	std	Y+17, r24	; 0x11
    29c2:	89 89       	ldd	r24, Y+17	; 0x11
    29c4:	9a 89       	ldd	r25, Y+18	; 0x12
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_8_BitvidInit+0x2ae>
    29ca:	9a 8b       	std	Y+18, r25	; 0x12
    29cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	8b 89       	ldd	r24, Y+19	; 0x13
    29d0:	9c 89       	ldd	r25, Y+20	; 0x14
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	9c 8b       	std	Y+20, r25	; 0x14
    29d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d8:	8b 89       	ldd	r24, Y+19	; 0x13
    29da:	9c 89       	ldd	r25, Y+20	; 0x14
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	69 f7       	brne	.-38     	; 0x29ba <LCD_8_BitvidInit+0x2a2>
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <LCD_8_BitvidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	98 8b       	std	Y+16, r25	; 0x10
    29fc:	8f 87       	std	Y+15, r24	; 0x0f
    29fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a00:	98 89       	ldd	r25, Y+16	; 0x10
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <LCD_8_BitvidInit+0x2ea>
    2a06:	98 8b       	std	Y+16, r25	; 0x10
    2a08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_CLEAR_CMD);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e4       	ldi	r27, 0x40	; 64
    2a18:	8b 87       	std	Y+11, r24	; 0x0b
    2a1a:	9c 87       	std	Y+12, r25	; 0x0c
    2a1c:	ad 87       	std	Y+13, r26	; 0x0d
    2a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	4a ef       	ldi	r20, 0xFA	; 250
    2a2e:	54 e4       	ldi	r21, 0x44	; 68
    2a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	8f 83       	std	Y+7, r24	; 0x07
    2a3a:	98 87       	std	Y+8, r25	; 0x08
    2a3c:	a9 87       	std	Y+9, r26	; 0x09
    2a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a40:	6f 81       	ldd	r22, Y+7	; 0x07
    2a42:	78 85       	ldd	r23, Y+8	; 0x08
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e8       	ldi	r20, 0x80	; 128
    2a4e:	5f e3       	ldi	r21, 0x3F	; 63
    2a50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a54:	88 23       	and	r24, r24
    2a56:	2c f4       	brge	.+10     	; 0x2a62 <LCD_8_BitvidInit+0x34a>
		__ticks = 1;
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
    2a60:	3f c0       	rjmp	.+126    	; 0x2ae0 <LCD_8_BitvidInit+0x3c8>
	else if (__tmp > 65535)
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	4f e7       	ldi	r20, 0x7F	; 127
    2a70:	57 e4       	ldi	r21, 0x47	; 71
    2a72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a76:	18 16       	cp	r1, r24
    2a78:	4c f5       	brge	.+82     	; 0x2acc <LCD_8_BitvidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e2       	ldi	r20, 0x20	; 32
    2a88:	51 e4       	ldi	r21, 0x41	; 65
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	0f c0       	rjmp	.+30     	; 0x2ac2 <LCD_8_BitvidInit+0x3aa>
    2aa4:	88 ec       	ldi	r24, 0xC8	; 200
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9c 83       	std	Y+4, r25	; 0x04
    2aaa:	8b 83       	std	Y+3, r24	; 0x03
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <LCD_8_BitvidInit+0x398>
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	9e 81       	ldd	r25, Y+6	; 0x06
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	69 f7       	brne	.-38     	; 0x2aa4 <LCD_8_BitvidInit+0x38c>
    2aca:	14 c0       	rjmp	.+40     	; 0x2af4 <LCD_8_BitvidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2acc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ace:	78 85       	ldd	r23, Y+8	; 0x08
    2ad0:	89 85       	ldd	r24, Y+9	; 0x09
    2ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9e 83       	std	Y+6, r25	; 0x06
    2ade:	8d 83       	std	Y+5, r24	; 0x05
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <LCD_8_BitvidInit+0x3d4>
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_8_BitvidsendCommand(LCD_8_BIT_ENTRY_MODE_SET_CMD);
    2af4:	86 e0       	ldi	r24, 0x06	; 6
    2af6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>

}
    2afa:	e8 96       	adiw	r28, 0x38	; 56
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <LCD_8_BitvidsendCommand>:
void LCD_8_BitvidsendCommand(u8 Copy_u8command)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	6d 97       	sbiw	r28, 0x1d	; 29
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	61 e0       	ldi	r22, 0x01	; 1
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8command);
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b3a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e4       	ldi	r27, 0x40	; 64
    2b50:	89 8f       	std	Y+25, r24	; 0x19
    2b52:	9a 8f       	std	Y+26, r25	; 0x1a
    2b54:	ab 8f       	std	Y+27, r26	; 0x1b
    2b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	69 8d       	ldd	r22, Y+25	; 0x19
    2b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8d 8b       	std	Y+21, r24	; 0x15
    2b72:	9e 8b       	std	Y+22, r25	; 0x16
    2b74:	af 8b       	std	Y+23, r26	; 0x17
    2b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <LCD_8_BitvidsendCommand+0x8e>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <LCD_8_BitvidsendCommand+0x10c>
	else if (__tmp > 65535)
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <LCD_8_BitvidsendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9c 8b       	std	Y+20, r25	; 0x14
    2bd8:	8b 8b       	std	Y+19, r24	; 0x13
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_8_BitvidsendCommand+0xee>
    2bdc:	88 ec       	ldi	r24, 0xC8	; 200
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9a 8b       	std	Y+18, r25	; 0x12
    2be2:	89 8b       	std	Y+17, r24	; 0x11
    2be4:	89 89       	ldd	r24, Y+17	; 0x11
    2be6:	9a 89       	ldd	r25, Y+18	; 0x12
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_8_BitvidsendCommand+0xdc>
    2bec:	9a 8b       	std	Y+18, r25	; 0x12
    2bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9c 8b       	std	Y+20, r25	; 0x14
    2bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <LCD_8_BitvidsendCommand+0xd0>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <LCD_8_BitvidsendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	6d 89       	ldd	r22, Y+21	; 0x15
    2c06:	7e 89       	ldd	r23, Y+22	; 0x16
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9c 8b       	std	Y+20, r25	; 0x14
    2c16:	8b 8b       	std	Y+19, r24	; 0x13
    2c18:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1c:	98 8b       	std	Y+16, r25	; 0x10
    2c1e:	8f 87       	std	Y+15, r24	; 0x0f
    2c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c22:	98 89       	ldd	r25, Y+16	; 0x10
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_8_BitvidsendCommand+0x118>
    2c28:	98 8b       	std	Y+16, r25	; 0x10
    2c2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e4       	ldi	r27, 0x40	; 64
    2c3e:	8b 87       	std	Y+11, r24	; 0x0b
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
    2c42:	ad 87       	std	Y+13, r26	; 0x0d
    2c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a ef       	ldi	r20, 0xFA	; 250
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8f 83       	std	Y+7, r24	; 0x07
    2c60:	98 87       	std	Y+8, r25	; 0x08
    2c62:	a9 87       	std	Y+9, r26	; 0x09
    2c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <LCD_8_BitvidsendCommand+0x17c>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <LCD_8_BitvidsendCommand+0x1fa>
	else if (__tmp > 65535)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <LCD_8_BitvidsendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <LCD_8_BitvidsendCommand+0x1dc>
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_8_BitvidsendCommand+0x1ca>
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <LCD_8_BitvidsendCommand+0x1be>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <LCD_8_BitvidsendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf4:	78 85       	ldd	r23, Y+8	; 0x08
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <LCD_8_BitvidsendCommand+0x206>
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2d1a:	6d 96       	adiw	r28, 0x1d	; 29
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <LCD_8_BitvidwriteCharacter>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character)
{
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	6d 97       	sbiw	r28, 0x1d	; 29
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	62 e0       	ldi	r22, 0x02	; 2
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2d5a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 e0       	ldi	r26, 0x00	; 0
    2d6e:	b0 e4       	ldi	r27, 0x40	; 64
    2d70:	89 8f       	std	Y+25, r24	; 0x19
    2d72:	9a 8f       	std	Y+26, r25	; 0x1a
    2d74:	ab 8f       	std	Y+27, r26	; 0x1b
    2d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	69 8d       	ldd	r22, Y+25	; 0x19
    2d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8d 8b       	std	Y+21, r24	; 0x15
    2d92:	9e 8b       	std	Y+22, r25	; 0x16
    2d94:	af 8b       	std	Y+23, r26	; 0x17
    2d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d98:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <LCD_8_BitvidwriteCharacter+0x8e>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <LCD_8_BitvidwriteCharacter+0x10c>
	else if (__tmp > 65535)
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <LCD_8_BitvidwriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <LCD_8_BitvidwriteCharacter+0xee>
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9a 8b       	std	Y+18, r25	; 0x12
    2e02:	89 8b       	std	Y+17, r24	; 0x11
    2e04:	89 89       	ldd	r24, Y+17	; 0x11
    2e06:	9a 89       	ldd	r25, Y+18	; 0x12
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <LCD_8_BitvidwriteCharacter+0xdc>
    2e0c:	9a 8b       	std	Y+18, r25	; 0x12
    2e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8b 89       	ldd	r24, Y+19	; 0x13
    2e12:	9c 89       	ldd	r25, Y+20	; 0x14
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
    2e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <LCD_8_BitvidwriteCharacter+0xd0>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <LCD_8_BitvidwriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6d 89       	ldd	r22, Y+21	; 0x15
    2e26:	7e 89       	ldd	r23, Y+22	; 0x16
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9c 8b       	std	Y+20, r25	; 0x14
    2e36:	8b 8b       	std	Y+19, r24	; 0x13
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	98 8b       	std	Y+16, r25	; 0x10
    2e3e:	8f 87       	std	Y+15, r24	; 0x0f
    2e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e42:	98 89       	ldd	r25, Y+16	; 0x10
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_8_BitvidwriteCharacter+0x118>
    2e48:	98 8b       	std	Y+16, r25	; 0x10
    2e4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2e4c:	83 e0       	ldi	r24, 0x03	; 3
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a0 e0       	ldi	r26, 0x00	; 0
    2e5c:	b0 e4       	ldi	r27, 0x40	; 64
    2e5e:	8b 87       	std	Y+11, r24	; 0x0b
    2e60:	9c 87       	std	Y+12, r25	; 0x0c
    2e62:	ad 87       	std	Y+13, r26	; 0x0d
    2e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4a ef       	ldi	r20, 0xFA	; 250
    2e74:	54 e4       	ldi	r21, 0x44	; 68
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8f 83       	std	Y+7, r24	; 0x07
    2e80:	98 87       	std	Y+8, r25	; 0x08
    2e82:	a9 87       	std	Y+9, r26	; 0x09
    2e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e8       	ldi	r20, 0x80	; 128
    2e94:	5f e3       	ldi	r21, 0x3F	; 63
    2e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9a:	88 23       	and	r24, r24
    2e9c:	2c f4       	brge	.+10     	; 0x2ea8 <LCD_8_BitvidwriteCharacter+0x17c>
		__ticks = 1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	3f c0       	rjmp	.+126    	; 0x2f26 <LCD_8_BitvidwriteCharacter+0x1fa>
	else if (__tmp > 65535)
    2ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eaa:	78 85       	ldd	r23, Y+8	; 0x08
    2eac:	89 85       	ldd	r24, Y+9	; 0x09
    2eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	4c f5       	brge	.+82     	; 0x2f12 <LCD_8_BitvidwriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e2       	ldi	r20, 0x20	; 32
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <LCD_8_BitvidwriteCharacter+0x1dc>
    2eea:	88 ec       	ldi	r24, 0xC8	; 200
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9c 83       	std	Y+4, r25	; 0x04
    2ef0:	8b 83       	std	Y+3, r24	; 0x03
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <LCD_8_BitvidwriteCharacter+0x1ca>
    2efa:	9c 83       	std	Y+4, r25	; 0x04
    2efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efe:	8d 81       	ldd	r24, Y+5	; 0x05
    2f00:	9e 81       	ldd	r25, Y+6	; 0x06
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	69 f7       	brne	.-38     	; 0x2eea <LCD_8_BitvidwriteCharacter+0x1be>
    2f10:	14 c0       	rjmp	.+40     	; 0x2f3a <LCD_8_BitvidwriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f12:	6f 81       	ldd	r22, Y+7	; 0x07
    2f14:	78 85       	ldd	r23, Y+8	; 0x08
    2f16:	89 85       	ldd	r24, Y+9	; 0x09
    2f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	9a 83       	std	Y+2, r25	; 0x02
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	9a 81       	ldd	r25, Y+2	; 0x02
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <LCD_8_BitvidwriteCharacter+0x206>
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2f3a:	6d 96       	adiw	r28, 0x1d	; 29
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <LCD_8_BitvidreadCharacter>:

void LCD_8_BitvidreadCharacter(u8 Copy_u8character)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	6d 97       	sbiw	r28, 0x1d	; 29
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2f62:	83 e0       	ldi	r24, 0x03	; 3
    2f64:	62 e0       	ldi	r22, 0x02	; 2
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, HIGH);
    2f6c:	83 e0       	ldi	r24, 0x03	; 3
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2f7a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2f7e:	83 e0       	ldi	r24, 0x03	; 3
    2f80:	60 e0       	ldi	r22, 0x00	; 0
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	a0 e0       	ldi	r26, 0x00	; 0
    2f8e:	b0 e4       	ldi	r27, 0x40	; 64
    2f90:	89 8f       	std	Y+25, r24	; 0x19
    2f92:	9a 8f       	std	Y+26, r25	; 0x1a
    2f94:	ab 8f       	std	Y+27, r26	; 0x1b
    2f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8d 8b       	std	Y+21, r24	; 0x15
    2fb2:	9e 8b       	std	Y+22, r25	; 0x16
    2fb4:	af 8b       	std	Y+23, r26	; 0x17
    2fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fba:	7e 89       	ldd	r23, Y+22	; 0x16
    2fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <LCD_8_BitvidreadCharacter+0x8e>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <LCD_8_BitvidreadCharacter+0x10c>
	else if (__tmp > 65535)
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <LCD_8_BitvidreadCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9c 8b       	std	Y+20, r25	; 0x14
    3018:	8b 8b       	std	Y+19, r24	; 0x13
    301a:	0f c0       	rjmp	.+30     	; 0x303a <LCD_8_BitvidreadCharacter+0xee>
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9a 8b       	std	Y+18, r25	; 0x12
    3022:	89 8b       	std	Y+17, r24	; 0x11
    3024:	89 89       	ldd	r24, Y+17	; 0x11
    3026:	9a 89       	ldd	r25, Y+18	; 0x12
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_8_BitvidreadCharacter+0xdc>
    302c:	9a 8b       	std	Y+18, r25	; 0x12
    302e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8b 89       	ldd	r24, Y+19	; 0x13
    3032:	9c 89       	ldd	r25, Y+20	; 0x14
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9c 8b       	std	Y+20, r25	; 0x14
    3038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8b 89       	ldd	r24, Y+19	; 0x13
    303c:	9c 89       	ldd	r25, Y+20	; 0x14
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <LCD_8_BitvidreadCharacter+0xd0>
    3042:	14 c0       	rjmp	.+40     	; 0x306c <LCD_8_BitvidreadCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	6d 89       	ldd	r22, Y+21	; 0x15
    3046:	7e 89       	ldd	r23, Y+22	; 0x16
    3048:	8f 89       	ldd	r24, Y+23	; 0x17
    304a:	98 8d       	ldd	r25, Y+24	; 0x18
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9c 8b       	std	Y+20, r25	; 0x14
    3056:	8b 8b       	std	Y+19, r24	; 0x13
    3058:	8b 89       	ldd	r24, Y+19	; 0x13
    305a:	9c 89       	ldd	r25, Y+20	; 0x14
    305c:	98 8b       	std	Y+16, r25	; 0x10
    305e:	8f 87       	std	Y+15, r24	; 0x0f
    3060:	8f 85       	ldd	r24, Y+15	; 0x0f
    3062:	98 89       	ldd	r25, Y+16	; 0x10
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <LCD_8_BitvidreadCharacter+0x118>
    3068:	98 8b       	std	Y+16, r25	; 0x10
    306a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e0       	ldi	r26, 0x00	; 0
    307c:	b0 e4       	ldi	r27, 0x40	; 64
    307e:	8b 87       	std	Y+11, r24	; 0x0b
    3080:	9c 87       	std	Y+12, r25	; 0x0c
    3082:	ad 87       	std	Y+13, r26	; 0x0d
    3084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	6b 85       	ldd	r22, Y+11	; 0x0b
    3088:	7c 85       	ldd	r23, Y+12	; 0x0c
    308a:	8d 85       	ldd	r24, Y+13	; 0x0d
    308c:	9e 85       	ldd	r25, Y+14	; 0x0e
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	4a ef       	ldi	r20, 0xFA	; 250
    3094:	54 e4       	ldi	r21, 0x44	; 68
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8f 83       	std	Y+7, r24	; 0x07
    30a0:	98 87       	std	Y+8, r25	; 0x08
    30a2:	a9 87       	std	Y+9, r26	; 0x09
    30a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a6:	6f 81       	ldd	r22, Y+7	; 0x07
    30a8:	78 85       	ldd	r23, Y+8	; 0x08
    30aa:	89 85       	ldd	r24, Y+9	; 0x09
    30ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	2c f4       	brge	.+10     	; 0x30c8 <LCD_8_BitvidreadCharacter+0x17c>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <LCD_8_BitvidreadCharacter+0x1fa>
	else if (__tmp > 65535)
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	3f ef       	ldi	r19, 0xFF	; 255
    30d4:	4f e7       	ldi	r20, 0x7F	; 127
    30d6:	57 e4       	ldi	r21, 0x47	; 71
    30d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30dc:	18 16       	cp	r1, r24
    30de:	4c f5       	brge	.+82     	; 0x3132 <LCD_8_BitvidreadCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <LCD_8_BitvidreadCharacter+0x1dc>
    310a:	88 ec       	ldi	r24, 0xC8	; 200
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9c 83       	std	Y+4, r25	; 0x04
    3110:	8b 83       	std	Y+3, r24	; 0x03
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	9c 81       	ldd	r25, Y+4	; 0x04
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <LCD_8_BitvidreadCharacter+0x1ca>
    311a:	9c 83       	std	Y+4, r25	; 0x04
    311c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	69 f7       	brne	.-38     	; 0x310a <LCD_8_BitvidreadCharacter+0x1be>
    3130:	14 c0       	rjmp	.+40     	; 0x315a <LCD_8_BitvidreadCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	6f 81       	ldd	r22, Y+7	; 0x07
    3134:	78 85       	ldd	r23, Y+8	; 0x08
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	9a 85       	ldd	r25, Y+10	; 0x0a
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	89 83       	std	Y+1, r24	; 0x01
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	9a 81       	ldd	r25, Y+2	; 0x02
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <LCD_8_BitvidreadCharacter+0x206>
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    315a:	6d 96       	adiw	r28, 0x1d	; 29
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <LCD_8_BitvidwriteString>:

void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <LCD_8_BitvidwriteString+0x6>
    3172:	0f 92       	push	r0
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	9b 83       	std	Y+3, r25	; 0x03
    317a:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	9b 81       	ldd	r25, Y+3	; 0x03
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	d9 f0       	breq	.+54     	; 0x31ba <LCD_8_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    3184:	19 82       	std	Y+1, r1	; 0x01
    3186:	0e c0       	rjmp	.+28     	; 0x31a4 <LCD_8_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	9b 81       	ldd	r25, Y+3	; 0x03
    3192:	fc 01       	movw	r30, r24
    3194:	e2 0f       	add	r30, r18
    3196:	f3 1f       	adc	r31, r19
    3198:	80 81       	ld	r24, Z
    319a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LCD_8_BitvidwriteCharacter>
			Local_u8Counter++;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	8f 5f       	subi	r24, 0xFF	; 255
    31a2:	89 83       	std	Y+1, r24	; 0x01
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	28 2f       	mov	r18, r24
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	9b 81       	ldd	r25, Y+3	; 0x03
    31ae:	fc 01       	movw	r30, r24
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	80 81       	ld	r24, Z
    31b6:	88 23       	and	r24, r24
    31b8:	39 f7       	brne	.-50     	; 0x3188 <LCD_8_BitvidwriteString+0x1c>
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <LCD_4_BitvidwriteString>:

void LCD_4_BitvidwriteString(const char* Copy_p2cString)
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <LCD_4_BitvidwriteString+0x6>
    31cc:	0f 92       	push	r0
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	9b 83       	std	Y+3, r25	; 0x03
    31d4:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	9b 81       	ldd	r25, Y+3	; 0x03
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	d9 f0       	breq	.+54     	; 0x3214 <LCD_4_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    31de:	19 82       	std	Y+1, r1	; 0x01
    31e0:	0e c0       	rjmp	.+28     	; 0x31fe <LCD_4_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_4_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	9b 81       	ldd	r25, Y+3	; 0x03
    31ec:	fc 01       	movw	r30, r24
    31ee:	e2 0f       	add	r30, r18
    31f0:	f3 1f       	adc	r31, r19
    31f2:	80 81       	ld	r24, Z
    31f4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_4_BitvidwriteCharacter>
			Local_u8Counter++;
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	8f 5f       	subi	r24, 0xFF	; 255
    31fc:	89 83       	std	Y+1, r24	; 0x01
void LCD_4_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	9b 81       	ldd	r25, Y+3	; 0x03
    3208:	fc 01       	movw	r30, r24
    320a:	e2 0f       	add	r30, r18
    320c:	f3 1f       	adc	r31, r19
    320e:	80 81       	ld	r24, Z
    3210:	88 23       	and	r24, r24
    3212:	39 f7       	brne	.-50     	; 0x31e2 <LCD_4_BitvidwriteString+0x1c>
		{
			LCD_4_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <LCD_8_BitvidGoToXY>:

void LCD_8_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	00 d0       	rcall	.+0      	; 0x3226 <LCD_8_BitvidGoToXY+0x6>
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	88 23       	and	r24, r24
    3234:	19 f4       	brne	.+6      	; 0x323c <LCD_8_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	89 83       	std	Y+1, r24	; 0x01
    323a:	06 c0       	rjmp	.+12     	; 0x3248 <LCD_8_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	19 f4       	brne	.+6      	; 0x3248 <LCD_8_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	80 5c       	subi	r24, 0xC0	; 192
    3246:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_8_BitvidsendCommand(Local_u8Address+128);
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	80 58       	subi	r24, 0x80	; 128
    324c:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <LCD_4_BitvidGoToXY>:

void LCD_4_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	00 d0       	rcall	.+0      	; 0x3262 <LCD_4_BitvidGoToXY+0x6>
    3262:	0f 92       	push	r0
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	8a 83       	std	Y+2, r24	; 0x02
    326a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
    326e:	88 23       	and	r24, r24
    3270:	19 f4       	brne	.+6      	; 0x3278 <LCD_4_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	06 c0       	rjmp	.+12     	; 0x3284 <LCD_4_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	19 f4       	brne	.+6      	; 0x3284 <LCD_4_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	80 5c       	subi	r24, 0xC0	; 192
    3282:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_4_BitvidsendCommand(Local_u8Address+128);
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	80 58       	subi	r24, 0x80	; 128
    3288:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <LCD_8_BitvidwriteSpecialCharacter>:

void LCD_8_BitvidwriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	27 97       	sbiw	r28, 0x07	; 7
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
    32b0:	6d 83       	std	Y+5, r22	; 0x05
    32b2:	4e 83       	std	Y+6, r20	; 0x06
    32b4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator;
    32b6:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	88 2f       	mov	r24, r24
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	80 5c       	subi	r24, 0xC0	; 192
    32d0:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_8_BitvidsendCommand>
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    32d4:	19 82       	std	Y+1, r1	; 0x01
    32d6:	0e c0       	rjmp	.+28     	; 0x32f4 <LCD_8_BitvidwriteSpecialCharacter+0x5c>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	9c 81       	ldd	r25, Y+4	; 0x04
    32e2:	fc 01       	movw	r30, r24
    32e4:	e2 0f       	add	r30, r18
    32e6:	f3 1f       	adc	r31, r19
    32e8:	80 81       	ld	r24, Z
    32ea:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LCD_8_BitvidwriteCharacter>
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	88 30       	cpi	r24, 0x08	; 8
    32f8:	78 f3       	brcs	.-34     	; 0x32d8 <LCD_8_BitvidwriteSpecialCharacter+0x40>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go Back to DDRam to Display the Pattern*/
	LCD_8_BitvidGoToXY(Copy_u8XPos,Copy_u8YPos);
    32fa:	8e 81       	ldd	r24, Y+6	; 0x06
    32fc:	6f 81       	ldd	r22, Y+7	; 0x07
    32fe:	0e 94 10 19 	call	0x3220	; 0x3220 <LCD_8_BitvidGoToXY>
	/*Display the Pattern Written in CGRam*/
	LCD_8_BitvidwriteCharacter(Copy_u8PatternNumber);
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LCD_8_BitvidwriteCharacter>
}
    3308:	27 96       	adiw	r28, 0x07	; 7
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <LCD_8_BitvidwriteInt>:
void LCD_8_BitvidwriteInt(u32 copy_u8number)
{
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	61 97       	sbiw	r28, 0x11	; 17
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	de bf       	out	0x3e, r29	; 62
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	cd bf       	out	0x3d, r28	; 61
    3332:	6e 87       	std	Y+14, r22	; 0x0e
    3334:	7f 87       	std	Y+15, r23	; 0x0f
    3336:	88 8b       	std	Y+16, r24	; 0x10
    3338:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    333a:	8e 85       	ldd	r24, Y+14	; 0x0e
    333c:	9f 85       	ldd	r25, Y+15	; 0x0f
    333e:	a8 89       	ldd	r26, Y+16	; 0x10
    3340:	b9 89       	ldd	r27, Y+17	; 0x11
    3342:	8b 83       	std	Y+3, r24	; 0x03
    3344:	9c 83       	std	Y+4, r25	; 0x04
    3346:	ad 83       	std	Y+5, r26	; 0x05
    3348:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    334a:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	9c 81       	ldd	r25, Y+4	; 0x04
    3350:	ad 81       	ldd	r26, Y+5	; 0x05
    3352:	be 81       	ldd	r27, Y+6	; 0x06
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	a1 05       	cpc	r26, r1
    3358:	b1 05       	cpc	r27, r1
    335a:	89 f5       	brne	.+98     	; 0x33be <LCD_8_BitvidwriteInt+0xa4>
	{
		LCD_8_BitvidwriteCharacter('0');
    335c:	80 e3       	ldi	r24, 0x30	; 48
    335e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LCD_8_BitvidwriteCharacter>
    3362:	4d c0       	rjmp	.+154    	; 0x33fe <LCD_8_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	08 2f       	mov	r16, r24
    3368:	10 e0       	ldi	r17, 0x00	; 0
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	ad 81       	ldd	r26, Y+5	; 0x05
    3370:	be 81       	ldd	r27, Y+6	; 0x06
    3372:	2a e0       	ldi	r18, 0x0A	; 10
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e0       	ldi	r20, 0x00	; 0
    3378:	50 e0       	ldi	r21, 0x00	; 0
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	28 2f       	mov	r18, r24
    3388:	ce 01       	movw	r24, r28
    338a:	07 96       	adiw	r24, 0x07	; 7
    338c:	fc 01       	movw	r30, r24
    338e:	e0 0f       	add	r30, r16
    3390:	f1 1f       	adc	r31, r17
    3392:	20 83       	st	Z, r18
			temp/=10;
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	9c 81       	ldd	r25, Y+4	; 0x04
    3398:	ad 81       	ldd	r26, Y+5	; 0x05
    339a:	be 81       	ldd	r27, Y+6	; 0x06
    339c:	2a e0       	ldi	r18, 0x0A	; 10
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    33ac:	da 01       	movw	r26, r20
    33ae:	c9 01       	movw	r24, r18
    33b0:	8b 83       	std	Y+3, r24	; 0x03
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    33b4:	ad 83       	std	Y+5, r26	; 0x05
    33b6:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_8_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	ad 81       	ldd	r26, Y+5	; 0x05
    33c4:	be 81       	ldd	r27, Y+6	; 0x06
    33c6:	00 97       	sbiw	r24, 0x00	; 0
    33c8:	a1 05       	cpc	r26, r1
    33ca:	b1 05       	cpc	r27, r1
    33cc:	59 f6       	brne	.-106    	; 0x3364 <LCD_8_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	81 50       	subi	r24, 0x01	; 1
    33d2:	89 83       	std	Y+1, r24	; 0x01
    33d4:	11 c0       	rjmp	.+34     	; 0x33f8 <LCD_8_BitvidwriteInt+0xde>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	28 2f       	mov	r18, r24
    33da:	33 27       	eor	r19, r19
    33dc:	27 fd       	sbrc	r18, 7
    33de:	30 95       	com	r19
    33e0:	ce 01       	movw	r24, r28
    33e2:	07 96       	adiw	r24, 0x07	; 7
    33e4:	fc 01       	movw	r30, r24
    33e6:	e2 0f       	add	r30, r18
    33e8:	f3 1f       	adc	r31, r19
    33ea:	80 81       	ld	r24, Z
    33ec:	80 5d       	subi	r24, 0xD0	; 208
    33ee:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <LCD_8_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	81 50       	subi	r24, 0x01	; 1
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	88 23       	and	r24, r24
    33fc:	64 f7       	brge	.-40     	; 0x33d6 <LCD_8_BitvidwriteInt+0xbc>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    33fe:	61 96       	adiw	r28, 0x11	; 17
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	1f 91       	pop	r17
    3410:	0f 91       	pop	r16
    3412:	08 95       	ret

00003414 <LCD_4_BitvidwriteInt>:

void LCD_4_BitvidwriteInt(u32 copy_u8number)
{
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	61 97       	sbiw	r28, 0x11	; 17
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	6e 87       	std	Y+14, r22	; 0x0e
    342e:	7f 87       	std	Y+15, r23	; 0x0f
    3430:	88 8b       	std	Y+16, r24	; 0x10
    3432:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3434:	8e 85       	ldd	r24, Y+14	; 0x0e
    3436:	9f 85       	ldd	r25, Y+15	; 0x0f
    3438:	a8 89       	ldd	r26, Y+16	; 0x10
    343a:	b9 89       	ldd	r27, Y+17	; 0x11
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	ad 83       	std	Y+5, r26	; 0x05
    3442:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3444:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	ad 81       	ldd	r26, Y+5	; 0x05
    344c:	be 81       	ldd	r27, Y+6	; 0x06
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	a1 05       	cpc	r26, r1
    3452:	b1 05       	cpc	r27, r1
    3454:	89 f5       	brne	.+98     	; 0x34b8 <LCD_4_BitvidwriteInt+0xa4>
	{
		LCD_4_BitvidwriteCharacter('0');
    3456:	80 e3       	ldi	r24, 0x30	; 48
    3458:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_4_BitvidwriteCharacter>
    345c:	4d c0       	rjmp	.+154    	; 0x34f8 <LCD_4_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	08 2f       	mov	r16, r24
    3462:	10 e0       	ldi	r17, 0x00	; 0
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	ad 81       	ldd	r26, Y+5	; 0x05
    346a:	be 81       	ldd	r27, Y+6	; 0x06
    346c:	2a e0       	ldi	r18, 0x0A	; 10
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	28 2f       	mov	r18, r24
    3482:	ce 01       	movw	r24, r28
    3484:	07 96       	adiw	r24, 0x07	; 7
    3486:	fc 01       	movw	r30, r24
    3488:	e0 0f       	add	r30, r16
    348a:	f1 1f       	adc	r31, r17
    348c:	20 83       	st	Z, r18
			temp/=10;
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	ad 81       	ldd	r26, Y+5	; 0x05
    3494:	be 81       	ldd	r27, Y+6	; 0x06
    3496:	2a e0       	ldi	r18, 0x0A	; 10
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	50 e0       	ldi	r21, 0x00	; 0
    349e:	bc 01       	movw	r22, r24
    34a0:	cd 01       	movw	r24, r26
    34a2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    34a6:	da 01       	movw	r26, r20
    34a8:	c9 01       	movw	r24, r18
    34aa:	8b 83       	std	Y+3, r24	; 0x03
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	ad 83       	std	Y+5, r26	; 0x05
    34b0:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	8f 5f       	subi	r24, 0xFF	; 255
    34b6:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_4_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    34b8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ba:	9c 81       	ldd	r25, Y+4	; 0x04
    34bc:	ad 81       	ldd	r26, Y+5	; 0x05
    34be:	be 81       	ldd	r27, Y+6	; 0x06
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	a1 05       	cpc	r26, r1
    34c4:	b1 05       	cpc	r27, r1
    34c6:	59 f6       	brne	.-106    	; 0x345e <LCD_4_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	81 50       	subi	r24, 0x01	; 1
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	11 c0       	rjmp	.+34     	; 0x34f2 <LCD_4_BitvidwriteInt+0xde>
		{
			LCD_4_BitvidwriteCharacter(digit[i]+'0');
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	28 2f       	mov	r18, r24
    34d4:	33 27       	eor	r19, r19
    34d6:	27 fd       	sbrc	r18, 7
    34d8:	30 95       	com	r19
    34da:	ce 01       	movw	r24, r28
    34dc:	07 96       	adiw	r24, 0x07	; 7
    34de:	fc 01       	movw	r30, r24
    34e0:	e2 0f       	add	r30, r18
    34e2:	f3 1f       	adc	r31, r19
    34e4:	80 81       	ld	r24, Z
    34e6:	80 5d       	subi	r24, 0xD0	; 208
    34e8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_4_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	81 50       	subi	r24, 0x01	; 1
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	88 23       	and	r24, r24
    34f6:	64 f7       	brge	.-40     	; 0x34d0 <LCD_4_BitvidwriteInt+0xbc>
		{
			LCD_4_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    34f8:	61 96       	adiw	r28, 0x11	; 17
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	08 95       	ret

0000350e <DCM_voidInit>:
#define DCM_USED_TIMER      TIMER_0

PWM_timers_config DCM_Speed;

void DCM_voidInit(u8 copy_u8MotorId)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <DCM_voidInit+0x6>
    3514:	0f 92       	push	r0
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	89 83       	std	Y+1, r24	; 0x01
	/* Initializ H-Bridge As Output Pins depend on motor id*/
	switch(copy_u8MotorId)
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	3b 83       	std	Y+3, r19	; 0x03
    3524:	2a 83       	std	Y+2, r18	; 0x02
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	9b 81       	ldd	r25, Y+3	; 0x03
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	91 05       	cpc	r25, r1
    352e:	31 f0       	breq	.+12     	; 0x353c <DCM_voidInit+0x2e>
    3530:	2a 81       	ldd	r18, Y+2	; 0x02
    3532:	3b 81       	ldd	r19, Y+3	; 0x03
    3534:	22 30       	cpi	r18, 0x02	; 2
    3536:	31 05       	cpc	r19, r1
    3538:	89 f0       	breq	.+34     	; 0x355c <DCM_voidInit+0x4e>
    353a:	1f c0       	rjmp	.+62     	; 0x357a <DCM_voidInit+0x6c>
	{
	case DCM_MOTOR_A:

		DIO_u8setPinDirection(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, OUTPUT);
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	63 e0       	ldi	r22, 0x03	; 3
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
		DIO_u8setPinDirection(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, OUTPUT);
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	62 e0       	ldi	r22, 0x02	; 2
    354a:	41 e0       	ldi	r20, 0x01	; 1
    354c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
		DIO_u8setPinDirection(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, OUTPUT);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	63 e0       	ldi	r22, 0x03	; 3
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
    355a:	0f c0       	rjmp	.+30     	; 0x357a <DCM_voidInit+0x6c>
		break;

	case DCM_MOTOR_B:

		DIO_u8setPinDirection(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, OUTPUT);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	62 e0       	ldi	r22, 0x02	; 2
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
		DIO_u8setPinDirection(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, OUTPUT);
    3566:	83 e0       	ldi	r24, 0x03	; 3
    3568:	66 e0       	ldi	r22, 0x06	; 6
    356a:	41 e0       	ldi	r20, 0x01	; 1
    356c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
		DIO_u8setPinDirection(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, OUTPUT);
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	64 e0       	ldi	r22, 0x04	; 4
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 a2 0c 	call	0x1944	; 0x1944 <DIO_u8setPinDirection>
		break;

	}
}
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <DCM_voidOn>:


void DCM_voidOn(u8 copy_u8MotorId, u8 Copy_u8MotorDirection)
{
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	28 97       	sbiw	r28, 0x08	; 8
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	89 83       	std	Y+1, r24	; 0x01
    359c:	6a 83       	std	Y+2, r22	; 0x02
	/* Turn DC motor on using H-Bridge Pins depend on Copy_u8Direction*/
	switch(copy_u8MotorId)
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	38 87       	std	Y+8, r19	; 0x08
    35a6:	2f 83       	std	Y+7, r18	; 0x07
    35a8:	8f 81       	ldd	r24, Y+7	; 0x07
    35aa:	98 85       	ldd	r25, Y+8	; 0x08
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	91 05       	cpc	r25, r1
    35b0:	31 f0       	breq	.+12     	; 0x35be <DCM_voidOn+0x38>
    35b2:	2f 81       	ldd	r18, Y+7	; 0x07
    35b4:	38 85       	ldd	r19, Y+8	; 0x08
    35b6:	22 30       	cpi	r18, 0x02	; 2
    35b8:	31 05       	cpc	r19, r1
    35ba:	79 f1       	breq	.+94     	; 0x361a <DCM_voidOn+0x94>
    35bc:	5b c0       	rjmp	.+182    	; 0x3674 <DCM_voidOn+0xee>
	{
	case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	3e 83       	std	Y+6, r19	; 0x06
    35c6:	2d 83       	std	Y+5, r18	; 0x05
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	81 30       	cpi	r24, 0x01	; 1
    35ce:	91 05       	cpc	r25, r1
    35d0:	31 f0       	breq	.+12     	; 0x35de <DCM_voidOn+0x58>
    35d2:	2d 81       	ldd	r18, Y+5	; 0x05
    35d4:	3e 81       	ldd	r19, Y+6	; 0x06
    35d6:	22 30       	cpi	r18, 0x02	; 2
    35d8:	31 05       	cpc	r19, r1
    35da:	61 f0       	breq	.+24     	; 0x35f4 <DCM_voidOn+0x6e>
    35dc:	15 c0       	rjmp	.+42     	; 0x3608 <DCM_voidOn+0x82>
		{
		case DCM_CLOCK_WISE:

			DIO_u8setPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, HIGH);
    35de:	82 e0       	ldi	r24, 0x02	; 2
    35e0:	63 e0       	ldi	r22, 0x03	; 3
    35e2:	41 e0       	ldi	r20, 0x01	; 1
    35e4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			DIO_u8setPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, LOW);
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	62 e0       	ldi	r22, 0x02	; 2
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    35f2:	0a c0       	rjmp	.+20     	; 0x3608 <DCM_voidOn+0x82>
			break;

		case DCM_COUNTER_CLOCK_WISE:
			DIO_u8setPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, LOW);
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	63 e0       	ldi	r22, 0x03	; 3
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			DIO_u8setPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, HIGH);
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	62 e0       	ldi	r22, 0x02	; 2
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			break;
		}
		Timer_DeInit(DCM_USED_TIMER);
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
		DIO_u8setPinValue(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, HIGH);
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	63 e0       	ldi	r22, 0x03	; 3
    3612:	41 e0       	ldi	r20, 0x01	; 1
    3614:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    3618:	2d c0       	rjmp	.+90     	; 0x3674 <DCM_voidOn+0xee>
		break;

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	3c 83       	std	Y+4, r19	; 0x04
    3622:	2b 83       	std	Y+3, r18	; 0x03
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	91 05       	cpc	r25, r1
    362c:	31 f0       	breq	.+12     	; 0x363a <DCM_voidOn+0xb4>
    362e:	2b 81       	ldd	r18, Y+3	; 0x03
    3630:	3c 81       	ldd	r19, Y+4	; 0x04
    3632:	22 30       	cpi	r18, 0x02	; 2
    3634:	31 05       	cpc	r19, r1
    3636:	61 f0       	breq	.+24     	; 0x3650 <DCM_voidOn+0xca>
    3638:	15 c0       	rjmp	.+42     	; 0x3664 <DCM_voidOn+0xde>
			{
			case DCM_CLOCK_WISE:
				DIO_u8setPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, HIGH);
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	62 e0       	ldi	r22, 0x02	; 2
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				DIO_u8setPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, LOW);
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	66 e0       	ldi	r22, 0x06	; 6
    3648:	40 e0       	ldi	r20, 0x00	; 0
    364a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    364e:	0a c0       	rjmp	.+20     	; 0x3664 <DCM_voidOn+0xde>
				break;

			case DCM_COUNTER_CLOCK_WISE:
				DIO_u8setPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, LOW);
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	62 e0       	ldi	r22, 0x02	; 2
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				DIO_u8setPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, HIGH);
    365a:	83 e0       	ldi	r24, 0x03	; 3
    365c:	66 e0       	ldi	r22, 0x06	; 6
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				break;
			}
			Timer_DeInit(DCM_USED_TIMER);
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
			DIO_u8setPinValue(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, HIGH);
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	64 e0       	ldi	r22, 0x04	; 4
    366e:	41 e0       	ldi	r20, 0x01	; 1
    3670:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			break;
	}
}
    3674:	28 96       	adiw	r28, 0x08	; 8
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <DCM_voidControlSpeed>:


void DCM_voidControlSpeed(u8 copy_u8MotorId, u8 Copy_u8MotorDirection, u8 Copy_u8Speed)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	29 97       	sbiw	r28, 0x09	; 9
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	6a 83       	std	Y+2, r22	; 0x02
    369e:	4b 83       	std	Y+3, r20	; 0x03
	DCM_Speed.timer = DCM_USED_TIMER;
    36a0:	10 92 9f 00 	sts	0x009F, r1
	DCM_Speed.T0_T1_used_freq = TIMER_0_1_PRE_SCALER_e_8;
    36a4:	82 e0       	ldi	r24, 0x02	; 2
    36a6:	80 93 9c 00 	sts	0x009C, r24
	DCM_Speed.PWM_Mode = FAST_PWM;
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	80 93 9e 00 	sts	0x009E, r24
	/* Turn DC motor on with Controlling desired(motorId) DC motor speed using PWM0 by setting Duty Cycle and turn it on using H-Bridge
	 By Setting Dir and Enable pins depend on motorDirection*/
	switch(copy_u8MotorId)
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	39 87       	std	Y+9, r19	; 0x09
    36b8:	28 87       	std	Y+8, r18	; 0x08
    36ba:	88 85       	ldd	r24, Y+8	; 0x08
    36bc:	99 85       	ldd	r25, Y+9	; 0x09
    36be:	81 30       	cpi	r24, 0x01	; 1
    36c0:	91 05       	cpc	r25, r1
    36c2:	31 f0       	breq	.+12     	; 0x36d0 <DCM_voidControlSpeed+0x4a>
    36c4:	28 85       	ldd	r18, Y+8	; 0x08
    36c6:	39 85       	ldd	r19, Y+9	; 0x09
    36c8:	22 30       	cpi	r18, 0x02	; 2
    36ca:	31 05       	cpc	r19, r1
    36cc:	91 f1       	breq	.+100    	; 0x3732 <DCM_voidControlSpeed+0xac>
    36ce:	61 c0       	rjmp	.+194    	; 0x3792 <DCM_voidControlSpeed+0x10c>
	{
	    case DCM_MOTOR_A:
		switch(Copy_u8MotorDirection)
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	3f 83       	std	Y+7, r19	; 0x07
    36d8:	2e 83       	std	Y+6, r18	; 0x06
    36da:	8e 81       	ldd	r24, Y+6	; 0x06
    36dc:	9f 81       	ldd	r25, Y+7	; 0x07
    36de:	81 30       	cpi	r24, 0x01	; 1
    36e0:	91 05       	cpc	r25, r1
    36e2:	31 f0       	breq	.+12     	; 0x36f0 <DCM_voidControlSpeed+0x6a>
    36e4:	2e 81       	ldd	r18, Y+6	; 0x06
    36e6:	3f 81       	ldd	r19, Y+7	; 0x07
    36e8:	22 30       	cpi	r18, 0x02	; 2
    36ea:	31 05       	cpc	r19, r1
    36ec:	61 f0       	breq	.+24     	; 0x3706 <DCM_voidControlSpeed+0x80>
    36ee:	15 c0       	rjmp	.+42     	; 0x371a <DCM_voidControlSpeed+0x94>
		{
		case DCM_CLOCK_WISE:
			DIO_u8setPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, HIGH);
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	63 e0       	ldi	r22, 0x03	; 3
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			DIO_u8setPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, LOW);
    36fa:	82 e0       	ldi	r24, 0x02	; 2
    36fc:	62 e0       	ldi	r22, 0x02	; 2
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    3704:	0a c0       	rjmp	.+20     	; 0x371a <DCM_voidControlSpeed+0x94>
			break;

		case DCM_COUNTER_CLOCK_WISE:
			DIO_u8setPinValue(DCM_MOTOR_A_IN1_PORT, DCM_MOTOR_A_IN1_PIN, LOW);
    3706:	82 e0       	ldi	r24, 0x02	; 2
    3708:	63 e0       	ldi	r22, 0x03	; 3
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			DIO_u8setPinValue(DCM_MOTOR_A_IN2_PORT, DCM_MOTOR_A_IN2_PIN, HIGH);
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	62 e0       	ldi	r22, 0x02	; 2
    3714:	41 e0       	ldi	r20, 0x01	; 1
    3716:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
			break;
		}
		DCM_Speed.set_duty_cycle = Copy_u8Speed;
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	90 93 99 00 	sts	0x0099, r25
    3724:	80 93 98 00 	sts	0x0098, r24
		PWM_timers_init(&DCM_Speed);
    3728:	86 e9       	ldi	r24, 0x96	; 150
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	0e 94 b7 0a 	call	0x156e	; 0x156e <PWM_timers_init>
    3730:	30 c0       	rjmp	.+96     	; 0x3792 <DCM_voidControlSpeed+0x10c>
		break;

		case DCM_MOTOR_B:
			switch(Copy_u8MotorDirection)
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	28 2f       	mov	r18, r24
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	3d 83       	std	Y+5, r19	; 0x05
    373a:	2c 83       	std	Y+4, r18	; 0x04
    373c:	8c 81       	ldd	r24, Y+4	; 0x04
    373e:	9d 81       	ldd	r25, Y+5	; 0x05
    3740:	81 30       	cpi	r24, 0x01	; 1
    3742:	91 05       	cpc	r25, r1
    3744:	31 f0       	breq	.+12     	; 0x3752 <DCM_voidControlSpeed+0xcc>
    3746:	2c 81       	ldd	r18, Y+4	; 0x04
    3748:	3d 81       	ldd	r19, Y+5	; 0x05
    374a:	22 30       	cpi	r18, 0x02	; 2
    374c:	31 05       	cpc	r19, r1
    374e:	61 f0       	breq	.+24     	; 0x3768 <DCM_voidControlSpeed+0xe2>
    3750:	15 c0       	rjmp	.+42     	; 0x377c <DCM_voidControlSpeed+0xf6>
			{
			case DCM_CLOCK_WISE:
				DIO_u8setPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, HIGH);
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	62 e0       	ldi	r22, 0x02	; 2
    3756:	41 e0       	ldi	r20, 0x01	; 1
    3758:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				DIO_u8setPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, LOW);
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	66 e0       	ldi	r22, 0x06	; 6
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    3766:	0a c0       	rjmp	.+20     	; 0x377c <DCM_voidControlSpeed+0xf6>
				break;

			case DCM_COUNTER_CLOCK_WISE:
				DIO_u8setPinValue(DCM_MOTOR_B_IN1_PORT, DCM_MOTOR_B_IN1_PIN, LOW);
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	62 e0       	ldi	r22, 0x02	; 2
    376c:	40 e0       	ldi	r20, 0x00	; 0
    376e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				DIO_u8setPinValue(DCM_MOTOR_B_IN2_PORT, DCM_MOTOR_B_IN2_PIN, HIGH);
    3772:	83 e0       	ldi	r24, 0x03	; 3
    3774:	66 e0       	ldi	r22, 0x06	; 6
    3776:	41 e0       	ldi	r20, 0x01	; 1
    3778:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
				break;
			}
			DCM_Speed.set_duty_cycle = Copy_u8Speed;
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	88 2f       	mov	r24, r24
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	90 93 99 00 	sts	0x0099, r25
    3786:	80 93 98 00 	sts	0x0098, r24
			PWM_timers_init(&DCM_Speed);
    378a:	86 e9       	ldi	r24, 0x96	; 150
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	0e 94 b7 0a 	call	0x156e	; 0x156e <PWM_timers_init>
			break;
	}
}
    3792:	29 96       	adiw	r28, 0x09	; 9
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	f8 94       	cli
    3798:	de bf       	out	0x3e, r29	; 62
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	cd bf       	out	0x3d, r28	; 61
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <DCM_voidOff>:


void DCM_voidOff(u8 copy_u8MotorId)
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <DCM_voidOff+0x6>
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8MotorId)
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	28 2f       	mov	r18, r24
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	3b 83       	std	Y+3, r19	; 0x03
    37ba:	2a 83       	std	Y+2, r18	; 0x02
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	9b 81       	ldd	r25, Y+3	; 0x03
    37c0:	81 30       	cpi	r24, 0x01	; 1
    37c2:	91 05       	cpc	r25, r1
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <DCM_voidOff+0x2e>
    37c6:	2a 81       	ldd	r18, Y+2	; 0x02
    37c8:	3b 81       	ldd	r19, Y+3	; 0x03
    37ca:	22 30       	cpi	r18, 0x02	; 2
    37cc:	31 05       	cpc	r19, r1
    37ce:	51 f0       	breq	.+20     	; 0x37e4 <DCM_voidOff+0x40>
    37d0:	11 c0       	rjmp	.+34     	; 0x37f4 <DCM_voidOff+0x50>
	{
	    case DCM_MOTOR_A:
	    Timer_DeInit(DCM_USED_TIMER);
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
	    DIO_u8setPinValue(DCM_MOTOR_A_ENABLE_PORT, DCM_MOTOR_A_ENABLE_PIN, LOW);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	63 e0       	ldi	r22, 0x03	; 3
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
    37e2:	08 c0       	rjmp	.+16     	; 0x37f4 <DCM_voidOff+0x50>
		break;

	    case DCM_MOTOR_B:
	    Timer_DeInit(DCM_USED_TIMER);
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
	   	DIO_u8setPinValue(DCM_MOTOR_B_ENABLE_PORT, DCM_MOTOR_B_ENABLE_PIN, LOW);
    37ea:	83 e0       	ldi	r24, 0x03	; 3
    37ec:	64 e0       	ldi	r22, 0x04	; 4
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <DIO_u8setPinValue>
	    break;
	}
}
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	08 95       	ret

00003800 <map>:

#include <util/delay.h>

// The Mapping Function
u32 map(u32 Value, u32 in_min, u32 in_max, u32 out_min, u32 out_max)
{
    3800:	af 92       	push	r10
    3802:	bf 92       	push	r11
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	60 97       	sbiw	r28, 0x10	; 16
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	69 83       	std	Y+1, r22	; 0x01
    3826:	7a 83       	std	Y+2, r23	; 0x02
    3828:	8b 83       	std	Y+3, r24	; 0x03
    382a:	9c 83       	std	Y+4, r25	; 0x04
    382c:	2d 83       	std	Y+5, r18	; 0x05
    382e:	3e 83       	std	Y+6, r19	; 0x06
    3830:	4f 83       	std	Y+7, r20	; 0x07
    3832:	58 87       	std	Y+8, r21	; 0x08
    3834:	e9 86       	std	Y+9, r14	; 0x09
    3836:	fa 86       	std	Y+10, r15	; 0x0a
    3838:	0b 87       	std	Y+11, r16	; 0x0b
    383a:	1c 87       	std	Y+12, r17	; 0x0c
    383c:	ad 86       	std	Y+13, r10	; 0x0d
    383e:	be 86       	std	Y+14, r11	; 0x0e
    3840:	cf 86       	std	Y+15, r12	; 0x0f
    3842:	d8 8a       	std	Y+16, r13	; 0x10
	return (Value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3844:	29 81       	ldd	r18, Y+1	; 0x01
    3846:	3a 81       	ldd	r19, Y+2	; 0x02
    3848:	4b 81       	ldd	r20, Y+3	; 0x03
    384a:	5c 81       	ldd	r21, Y+4	; 0x04
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	af 81       	ldd	r26, Y+7	; 0x07
    3852:	b8 85       	ldd	r27, Y+8	; 0x08
    3854:	79 01       	movw	r14, r18
    3856:	8a 01       	movw	r16, r20
    3858:	e8 1a       	sub	r14, r24
    385a:	f9 0a       	sbc	r15, r25
    385c:	0a 0b       	sbc	r16, r26
    385e:	1b 0b       	sbc	r17, r27
    3860:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3862:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3864:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3866:	58 a1       	ldd	r21, Y+32	; 0x20
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	af 85       	ldd	r26, Y+15	; 0x0f
    386e:	b8 89       	ldd	r27, Y+16	; 0x10
    3870:	28 1b       	sub	r18, r24
    3872:	39 0b       	sbc	r19, r25
    3874:	4a 0b       	sbc	r20, r26
    3876:	5b 0b       	sbc	r21, r27
    3878:	c8 01       	movw	r24, r16
    387a:	b7 01       	movw	r22, r14
    387c:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__mulsi3>
    3880:	7b 01       	movw	r14, r22
    3882:	8c 01       	movw	r16, r24
    3884:	29 85       	ldd	r18, Y+9	; 0x09
    3886:	3a 85       	ldd	r19, Y+10	; 0x0a
    3888:	4b 85       	ldd	r20, Y+11	; 0x0b
    388a:	5c 85       	ldd	r21, Y+12	; 0x0c
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	af 81       	ldd	r26, Y+7	; 0x07
    3892:	b8 85       	ldd	r27, Y+8	; 0x08
    3894:	28 1b       	sub	r18, r24
    3896:	39 0b       	sbc	r19, r25
    3898:	4a 0b       	sbc	r20, r26
    389a:	5b 0b       	sbc	r21, r27
    389c:	c8 01       	movw	r24, r16
    389e:	b7 01       	movw	r22, r14
    38a0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    38a4:	da 01       	movw	r26, r20
    38a6:	c9 01       	movw	r24, r18
    38a8:	9c 01       	movw	r18, r24
    38aa:	ad 01       	movw	r20, r26
    38ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b0:	af 85       	ldd	r26, Y+15	; 0x0f
    38b2:	b8 89       	ldd	r27, Y+16	; 0x10
    38b4:	82 0f       	add	r24, r18
    38b6:	93 1f       	adc	r25, r19
    38b8:	a4 1f       	adc	r26, r20
    38ba:	b5 1f       	adc	r27, r21
}
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	60 96       	adiw	r28, 0x10	; 16
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	ff 90       	pop	r15
    38d6:	ef 90       	pop	r14
    38d8:	df 90       	pop	r13
    38da:	cf 90       	pop	r12
    38dc:	bf 90       	pop	r11
    38de:	af 90       	pop	r10
    38e0:	08 95       	ret

000038e2 <main>:

void main(void)
{
    38e2:	af 92       	push	r10
    38e4:	bf 92       	push	r11
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	68 97       	sbiw	r28, 0x18	; 24
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61

	u16 Temp_C;
	LCD_4_BitvidInit();
    3906:	0e 94 57 10 	call	0x20ae	; 0x20ae <LCD_4_BitvidInit>
	LM35_voidInit();
    390a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <LM35_voidInit>
	DCM_voidInit(DCM_MOTOR_A);
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	0e 94 87 1a 	call	0x350e	; 0x350e <DCM_voidInit>

while(1)
{
	u32 airFlow = map(Temp_C,21,39,127,255);
    3914:	8f 89       	ldd	r24, Y+23	; 0x17
    3916:	98 8d       	ldd	r25, Y+24	; 0x18
    3918:	9c 01       	movw	r18, r24
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	00 d0       	rcall	.+0      	; 0x3920 <main+0x3e>
    3920:	00 d0       	rcall	.+0      	; 0x3922 <main+0x40>
    3922:	ed b7       	in	r30, 0x3d	; 61
    3924:	fe b7       	in	r31, 0x3e	; 62
    3926:	31 96       	adiw	r30, 0x01	; 1
    3928:	8f ef       	ldi	r24, 0xFF	; 255
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	a0 e0       	ldi	r26, 0x00	; 0
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	80 83       	st	Z, r24
    3932:	91 83       	std	Z+1, r25	; 0x01
    3934:	a2 83       	std	Z+2, r26	; 0x02
    3936:	b3 83       	std	Z+3, r27	; 0x03
    3938:	ca 01       	movw	r24, r20
    393a:	b9 01       	movw	r22, r18
    393c:	25 e1       	ldi	r18, 0x15	; 21
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	0f 2e       	mov	r0, r31
    3946:	f7 e2       	ldi	r31, 0x27	; 39
    3948:	ef 2e       	mov	r14, r31
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	ff 2e       	mov	r15, r31
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	0f 2f       	mov	r16, r31
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	1f 2f       	mov	r17, r31
    3956:	f0 2d       	mov	r31, r0
    3958:	0f 2e       	mov	r0, r31
    395a:	ff e7       	ldi	r31, 0x7F	; 127
    395c:	af 2e       	mov	r10, r31
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	bf 2e       	mov	r11, r31
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	cf 2e       	mov	r12, r31
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	df 2e       	mov	r13, r31
    396a:	f0 2d       	mov	r31, r0
    396c:	0e 94 00 1c 	call	0x3800	; 0x3800 <map>
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	8b 8b       	std	Y+19, r24	; 0x13
    397e:	9c 8b       	std	Y+20, r25	; 0x14
    3980:	ad 8b       	std	Y+21, r26	; 0x15
    3982:	be 8b       	std	Y+22, r27	; 0x16
	u32 Prcn = map(airFlow,127,255,0,100);
    3984:	00 d0       	rcall	.+0      	; 0x3986 <main+0xa4>
    3986:	00 d0       	rcall	.+0      	; 0x3988 <main+0xa6>
    3988:	ed b7       	in	r30, 0x3d	; 61
    398a:	fe b7       	in	r31, 0x3e	; 62
    398c:	31 96       	adiw	r30, 0x01	; 1
    398e:	2b 89       	ldd	r18, Y+19	; 0x13
    3990:	3c 89       	ldd	r19, Y+20	; 0x14
    3992:	4d 89       	ldd	r20, Y+21	; 0x15
    3994:	5e 89       	ldd	r21, Y+22	; 0x16
    3996:	84 e6       	ldi	r24, 0x64	; 100
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e0       	ldi	r26, 0x00	; 0
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	80 83       	st	Z, r24
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	a2 83       	std	Z+2, r26	; 0x02
    39a4:	b3 83       	std	Z+3, r27	; 0x03
    39a6:	ca 01       	movw	r24, r20
    39a8:	b9 01       	movw	r22, r18
    39aa:	2f e7       	ldi	r18, 0x7F	; 127
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	0f 2e       	mov	r0, r31
    39b4:	ff ef       	ldi	r31, 0xFF	; 255
    39b6:	ef 2e       	mov	r14, r31
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	ff 2e       	mov	r15, r31
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	0f 2f       	mov	r16, r31
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	1f 2f       	mov	r17, r31
    39c4:	f0 2d       	mov	r31, r0
    39c6:	aa 24       	eor	r10, r10
    39c8:	bb 24       	eor	r11, r11
    39ca:	65 01       	movw	r12, r10
    39cc:	0e 94 00 1c 	call	0x3800	; 0x3800 <map>
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	8f 87       	std	Y+15, r24	; 0x0f
    39de:	98 8b       	std	Y+16, r25	; 0x10
    39e0:	a9 8b       	std	Y+17, r26	; 0x11
    39e2:	ba 8b       	std	Y+18, r27	; 0x12
	LM35_voidGetTemperature(&Temp_C);
    39e4:	ce 01       	movw	r24, r28
    39e6:	47 96       	adiw	r24, 0x17	; 23
    39e8:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LM35_voidGetTemperature>
	LCD_4_BitvidsendCommand(0b00000001);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidwriteString("TEMP = ");
    39f2:	80 e6       	ldi	r24, 0x60	; 96
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_4_BitvidwriteString>
	LCD_4_BitvidwriteInt(Temp_C);
    39fa:	8f 89       	ldd	r24, Y+23	; 0x17
    39fc:	98 8d       	ldd	r25, Y+24	; 0x18
    39fe:	cc 01       	movw	r24, r24
    3a00:	a0 e0       	ldi	r26, 0x00	; 0
    3a02:	b0 e0       	ldi	r27, 0x00	; 0
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	0e 94 0a 1a 	call	0x3414	; 0x3414 <LCD_4_BitvidwriteInt>
	LCD_4_BitvidwriteCharacter('C');
    3a0c:	83 e4       	ldi	r24, 0x43	; 67
    3a0e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <LCD_4_BitvidwriteCharacter>
	LCD_4_BitvidGoToXY(1,0);
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	0e 94 2e 19 	call	0x325c	; 0x325c <LCD_4_BitvidGoToXY>
	LCD_4_BitvidwriteString("Fan Speed = ");
    3a1a:	88 e6       	ldi	r24, 0x68	; 104
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <LCD_4_BitvidwriteString>
	LCD_4_BitvidwriteInt((u8)Prcn);
    3a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a24:	88 2f       	mov	r24, r24
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	a0 e0       	ldi	r26, 0x00	; 0
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	0e 94 0a 1a 	call	0x3414	; 0x3414 <LCD_4_BitvidwriteInt>
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	aa e7       	ldi	r26, 0x7A	; 122
    3a3a:	b3 e4       	ldi	r27, 0x43	; 67
    3a3c:	8b 87       	std	Y+11, r24	; 0x0b
    3a3e:	9c 87       	std	Y+12, r25	; 0x0c
    3a40:	ad 87       	std	Y+13, r26	; 0x0d
    3a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	4a ef       	ldi	r20, 0xFA	; 250
    3a52:	54 e4       	ldi	r21, 0x44	; 68
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	8f 83       	std	Y+7, r24	; 0x07
    3a5e:	98 87       	std	Y+8, r25	; 0x08
    3a60:	a9 87       	std	Y+9, r26	; 0x09
    3a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a64:	6f 81       	ldd	r22, Y+7	; 0x07
    3a66:	78 85       	ldd	r23, Y+8	; 0x08
    3a68:	89 85       	ldd	r24, Y+9	; 0x09
    3a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	40 e8       	ldi	r20, 0x80	; 128
    3a72:	5f e3       	ldi	r21, 0x3F	; 63
    3a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a78:	88 23       	and	r24, r24
    3a7a:	2c f4       	brge	.+10     	; 0x3a86 <main+0x1a4>
		__ticks = 1;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	9e 83       	std	Y+6, r25	; 0x06
    3a82:	8d 83       	std	Y+5, r24	; 0x05
    3a84:	3f c0       	rjmp	.+126    	; 0x3b04 <main+0x222>
	else if (__tmp > 65535)
    3a86:	6f 81       	ldd	r22, Y+7	; 0x07
    3a88:	78 85       	ldd	r23, Y+8	; 0x08
    3a8a:	89 85       	ldd	r24, Y+9	; 0x09
    3a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	3f ef       	ldi	r19, 0xFF	; 255
    3a92:	4f e7       	ldi	r20, 0x7F	; 127
    3a94:	57 e4       	ldi	r21, 0x47	; 71
    3a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a9a:	18 16       	cp	r1, r24
    3a9c:	4c f5       	brge	.+82     	; 0x3af0 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e2       	ldi	r20, 0x20	; 32
    3aac:	51 e4       	ldi	r21, 0x41	; 65
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9e 83       	std	Y+6, r25	; 0x06
    3ac4:	8d 83       	std	Y+5, r24	; 0x05
    3ac6:	0f c0       	rjmp	.+30     	; 0x3ae6 <main+0x204>
    3ac8:	88 ec       	ldi	r24, 0xC8	; 200
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	9c 83       	std	Y+4, r25	; 0x04
    3ace:	8b 83       	std	Y+3, r24	; 0x03
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <main+0x1f2>
    3ad8:	9c 83       	std	Y+4, r25	; 0x04
    3ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	69 f7       	brne	.-38     	; 0x3ac8 <main+0x1e6>
    3aee:	14 c0       	rjmp	.+40     	; 0x3b18 <main+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af0:	6f 81       	ldd	r22, Y+7	; 0x07
    3af2:	78 85       	ldd	r23, Y+8	; 0x08
    3af4:	89 85       	ldd	r24, Y+9	; 0x09
    3af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	9e 83       	std	Y+6, r25	; 0x06
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	8d 81       	ldd	r24, Y+5	; 0x05
    3b06:	9e 81       	ldd	r25, Y+6	; 0x06
    3b08:	9a 83       	std	Y+2, r25	; 0x02
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <main+0x22e>
    3b14:	9a 83       	std	Y+2, r25	; 0x02
    3b16:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);

	if(Temp_C <= 20)
    3b18:	8f 89       	ldd	r24, Y+23	; 0x17
    3b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1c:	85 31       	cpi	r24, 0x15	; 21
    3b1e:	91 05       	cpc	r25, r1
    3b20:	40 f4       	brcc	.+16     	; 0x3b32 <main+0x250>
	{
	  DCM_voidOff(DCM_MOTOR_A);
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <DCM_voidOff>
	  airFlow = 0;
    3b28:	1b 8a       	std	Y+19, r1	; 0x13
    3b2a:	1c 8a       	std	Y+20, r1	; 0x14
    3b2c:	1d 8a       	std	Y+21, r1	; 0x15
    3b2e:	1e 8a       	std	Y+22, r1	; 0x16
    3b30:	f1 ce       	rjmp	.-542    	; 0x3914 <main+0x32>
	}
	else if(Temp_C > 20 && Temp_C < 40)
    3b32:	8f 89       	ldd	r24, Y+23	; 0x17
    3b34:	98 8d       	ldd	r25, Y+24	; 0x18
    3b36:	85 31       	cpi	r24, 0x15	; 21
    3b38:	91 05       	cpc	r25, r1
    3b3a:	60 f0       	brcs	.+24     	; 0x3b54 <main+0x272>
    3b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b40:	88 32       	cpi	r24, 0x28	; 40
    3b42:	91 05       	cpc	r25, r1
    3b44:	38 f4       	brcc	.+14     	; 0x3b54 <main+0x272>
	{

		DCM_voidControlSpeed(DCM_MOTOR_A,DCM_CLOCK_WISE,(u8)airFlow);
    3b46:	9b 89       	ldd	r25, Y+19	; 0x13
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	61 e0       	ldi	r22, 0x01	; 1
    3b4c:	49 2f       	mov	r20, r25
    3b4e:	0e 94 43 1b 	call	0x3686	; 0x3686 <DCM_voidControlSpeed>
    3b52:	e0 ce       	rjmp	.-576    	; 0x3914 <main+0x32>
	}
	else
	{
        DCM_voidOn(DCM_MOTOR_A,DCM_CLOCK_WISE);
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	0e 94 c3 1a 	call	0x3586	; 0x3586 <DCM_voidOn>
		airFlow = 255;
    3b5c:	8f ef       	ldi	r24, 0xFF	; 255
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 e0       	ldi	r26, 0x00	; 0
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	8b 8b       	std	Y+19, r24	; 0x13
    3b66:	9c 8b       	std	Y+20, r25	; 0x14
    3b68:	ad 8b       	std	Y+21, r26	; 0x15
    3b6a:	be 8b       	std	Y+22, r27	; 0x16
    3b6c:	d3 ce       	rjmp	.-602    	; 0x3914 <main+0x32>

00003b6e <__mulsi3>:
    3b6e:	62 9f       	mul	r22, r18
    3b70:	d0 01       	movw	r26, r0
    3b72:	73 9f       	mul	r23, r19
    3b74:	f0 01       	movw	r30, r0
    3b76:	82 9f       	mul	r24, r18
    3b78:	e0 0d       	add	r30, r0
    3b7a:	f1 1d       	adc	r31, r1
    3b7c:	64 9f       	mul	r22, r20
    3b7e:	e0 0d       	add	r30, r0
    3b80:	f1 1d       	adc	r31, r1
    3b82:	92 9f       	mul	r25, r18
    3b84:	f0 0d       	add	r31, r0
    3b86:	83 9f       	mul	r24, r19
    3b88:	f0 0d       	add	r31, r0
    3b8a:	74 9f       	mul	r23, r20
    3b8c:	f0 0d       	add	r31, r0
    3b8e:	65 9f       	mul	r22, r21
    3b90:	f0 0d       	add	r31, r0
    3b92:	99 27       	eor	r25, r25
    3b94:	72 9f       	mul	r23, r18
    3b96:	b0 0d       	add	r27, r0
    3b98:	e1 1d       	adc	r30, r1
    3b9a:	f9 1f       	adc	r31, r25
    3b9c:	63 9f       	mul	r22, r19
    3b9e:	b0 0d       	add	r27, r0
    3ba0:	e1 1d       	adc	r30, r1
    3ba2:	f9 1f       	adc	r31, r25
    3ba4:	bd 01       	movw	r22, r26
    3ba6:	cf 01       	movw	r24, r30
    3ba8:	11 24       	eor	r1, r1
    3baa:	08 95       	ret

00003bac <__udivmodhi4>:
    3bac:	aa 1b       	sub	r26, r26
    3bae:	bb 1b       	sub	r27, r27
    3bb0:	51 e1       	ldi	r21, 0x11	; 17
    3bb2:	07 c0       	rjmp	.+14     	; 0x3bc2 <__udivmodhi4_ep>

00003bb4 <__udivmodhi4_loop>:
    3bb4:	aa 1f       	adc	r26, r26
    3bb6:	bb 1f       	adc	r27, r27
    3bb8:	a6 17       	cp	r26, r22
    3bba:	b7 07       	cpc	r27, r23
    3bbc:	10 f0       	brcs	.+4      	; 0x3bc2 <__udivmodhi4_ep>
    3bbe:	a6 1b       	sub	r26, r22
    3bc0:	b7 0b       	sbc	r27, r23

00003bc2 <__udivmodhi4_ep>:
    3bc2:	88 1f       	adc	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	5a 95       	dec	r21
    3bc8:	a9 f7       	brne	.-22     	; 0x3bb4 <__udivmodhi4_loop>
    3bca:	80 95       	com	r24
    3bcc:	90 95       	com	r25
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	08 95       	ret

00003bd4 <__udivmodsi4>:
    3bd4:	a1 e2       	ldi	r26, 0x21	; 33
    3bd6:	1a 2e       	mov	r1, r26
    3bd8:	aa 1b       	sub	r26, r26
    3bda:	bb 1b       	sub	r27, r27
    3bdc:	fd 01       	movw	r30, r26
    3bde:	0d c0       	rjmp	.+26     	; 0x3bfa <__udivmodsi4_ep>

00003be0 <__udivmodsi4_loop>:
    3be0:	aa 1f       	adc	r26, r26
    3be2:	bb 1f       	adc	r27, r27
    3be4:	ee 1f       	adc	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	a2 17       	cp	r26, r18
    3bea:	b3 07       	cpc	r27, r19
    3bec:	e4 07       	cpc	r30, r20
    3bee:	f5 07       	cpc	r31, r21
    3bf0:	20 f0       	brcs	.+8      	; 0x3bfa <__udivmodsi4_ep>
    3bf2:	a2 1b       	sub	r26, r18
    3bf4:	b3 0b       	sbc	r27, r19
    3bf6:	e4 0b       	sbc	r30, r20
    3bf8:	f5 0b       	sbc	r31, r21

00003bfa <__udivmodsi4_ep>:
    3bfa:	66 1f       	adc	r22, r22
    3bfc:	77 1f       	adc	r23, r23
    3bfe:	88 1f       	adc	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	1a 94       	dec	r1
    3c04:	69 f7       	brne	.-38     	; 0x3be0 <__udivmodsi4_loop>
    3c06:	60 95       	com	r22
    3c08:	70 95       	com	r23
    3c0a:	80 95       	com	r24
    3c0c:	90 95       	com	r25
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	bd 01       	movw	r22, r26
    3c14:	cf 01       	movw	r24, r30
    3c16:	08 95       	ret

00003c18 <__prologue_saves__>:
    3c18:	2f 92       	push	r2
    3c1a:	3f 92       	push	r3
    3c1c:	4f 92       	push	r4
    3c1e:	5f 92       	push	r5
    3c20:	6f 92       	push	r6
    3c22:	7f 92       	push	r7
    3c24:	8f 92       	push	r8
    3c26:	9f 92       	push	r9
    3c28:	af 92       	push	r10
    3c2a:	bf 92       	push	r11
    3c2c:	cf 92       	push	r12
    3c2e:	df 92       	push	r13
    3c30:	ef 92       	push	r14
    3c32:	ff 92       	push	r15
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	cd b7       	in	r28, 0x3d	; 61
    3c3e:	de b7       	in	r29, 0x3e	; 62
    3c40:	ca 1b       	sub	r28, r26
    3c42:	db 0b       	sbc	r29, r27
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	09 94       	ijmp

00003c50 <__epilogue_restores__>:
    3c50:	2a 88       	ldd	r2, Y+18	; 0x12
    3c52:	39 88       	ldd	r3, Y+17	; 0x11
    3c54:	48 88       	ldd	r4, Y+16	; 0x10
    3c56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c62:	b9 84       	ldd	r11, Y+9	; 0x09
    3c64:	c8 84       	ldd	r12, Y+8	; 0x08
    3c66:	df 80       	ldd	r13, Y+7	; 0x07
    3c68:	ee 80       	ldd	r14, Y+6	; 0x06
    3c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c70:	aa 81       	ldd	r26, Y+2	; 0x02
    3c72:	b9 81       	ldd	r27, Y+1	; 0x01
    3c74:	ce 0f       	add	r28, r30
    3c76:	d1 1d       	adc	r29, r1
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	ed 01       	movw	r28, r26
    3c84:	08 95       	ret

00003c86 <_exit>:
    3c86:	f8 94       	cli

00003c88 <__stop_program>:
    3c88:	ff cf       	rjmp	.-2      	; 0x3c88 <__stop_program>
